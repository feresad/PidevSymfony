{% extends 'baseadmin.html.twig' %}

{% block title %}Tableau de bord administrateur{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .user-card {
            background: #fff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s;
            margin-bottom: 20px;
        }
        .user-card:hover {
            transform: translateY(-5px);
        }
        .user-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            margin-right: 15px;
            position: relative;
        }
        .user-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .user-info h3 {
            margin: 0;
            font-size: 18px;
            color: #333;
        }
        .user-info p {
            margin: 5px 0 0;
            color: #666;
        }
        .user-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        .user-actions button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 8px 12px;
            border-radius: 5px;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .user-actions .report-btn {
            color: #f59e0b;
            background-color: #fef3c7;
        }
        .user-actions .report-btn:hover {
            background-color: #fde68a;
        }
        .user-actions .ban-btn {
            background-color: #fee2e2;
            color: #dc2626;
        }
        .user-actions .ban-btn:hover {
            background-color: #fecaca;
        }
        .user-actions .unban-btn {
            background-color: #dcfce7;
            color: #15803d;
        }
        .user-actions .unban-btn:hover {
            background-color: #bbf7d0;
        }
        .user-actions ion-icon {
            font-size: 18px;
        }
        .search-container {
            margin: 20px;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .search-form {
            display: flex;
            gap: 10px;
            max-width: 600px;
            margin: 0 auto;
        }
        .search-input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            font-size: 16px;
        }
        .search-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
        }
        .search-button {
            padding: 10px 20px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .search-button:hover {
            background: #0056b3;
        }
        .users-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            padding: 20px;
        }
        .pagination-container {
            margin: 20px;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 5px;
            margin: 0;
            padding: 0;
            list-style: none;
        }
        .pagination span, .pagination a {
            display: flex;
            align-items: center;
            justify-content: center;
            min-width: 40px;
            height: 40px;
            padding: 0 10px;
            border-radius: 20px;
            background: #fff;
            border: 1px solid #dee2e6;
            color: #007bff;
            text-decoration: none;
            transition: all 0.3s ease;
        }
        .pagination .current {
            background: #007bff;
            border-color: #007bff;
            color: white;
        }
        .pagination a:hover {
            background: #e9ecef;
            border-color: #dee2e6;
            color: #0056b3;
        }
        .pagination-info {
            text-align: center;
            margin-bottom: 15px;
            color: #6c757d;
            font-size: 0.9rem;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }
        .modal-content {
            position: relative;
            background-color: #fff;
            margin: 10% auto;
            padding: 20px;
            width: 80%;
            max-width: 800px;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }
        .close-modal {
            position: absolute;
            right: 20px;
            top: 15px;
            font-size: 24px;
            cursor: pointer;
            color: #666;
        }
        .reports-list {
            margin-top: 20px;
            max-height: 400px;
            overflow-y: auto;
        }
        .report-item {
            padding: 15px;
            border-bottom: 1px solid #eee;
        }
        .report-item:last-child {
            border-bottom: none;
        }
        .report-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .report-reason {
            font-weight: bold;
            color: #f59e0b;
        }
        .report-status {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.9em;
        }
        .status-pending {
            background-color: #fef3c7;
            color: #d97706;
        }
        .status-reviewed {
            background-color: #dbeafe;
            color: #1d4ed8;
        }
        .status-resolved {
            background-color: #dcfce7;
            color: #15803d;
        }
        .report-details {
            color: #666;
            font-size: 0.9em;
        }
        .report-date {
            color: #999;
            font-size: 0.8em;
            margin-top: 5px;
        }
        .reporter-info {
            margin-bottom: 10px;
            color: #666;
        }
        .reporter-label {
            font-weight: 500;
            color: #4b5563;
        }
        .reporter-name {
            color: #1f2937;
            font-weight: 500;
        }
        .reporter-nickname {
            color: #6b7280;
            font-size: 0.9em;
        }
        .report-evidence {
            margin-top: 8px;
            padding: 8px;
            background-color: #f3f4f6;
            border-radius: 4px;
            color: #4b5563;
        }
        .ban-options {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin: 20px 0;
        }
        .ban-option {
            padding: 12px;
            border: none;
            border-radius: 6px;
            background-color: #f3f4f6;
            color: #1f2937;
            cursor: pointer;
            transition: all 0.2s;
        }
        .ban-option:hover {
            background-color: #e5e7eb;
        }
        .ban-confirm {
            margin-top: 20px;
            padding: 15px;
            background-color: #f3f4f6;
            border-radius: 6px;
        }
        .ban-buttons {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        .confirm-ban {
            background-color: #dc2626;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .confirm-ban:hover {
            background-color: #b91c1c;
        }
        .cancel-ban {
            background-color: #6b7280;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .cancel-ban:hover {
            background-color: #4b5563;
        }
        .ban-info {
            margin-top: 10px;
            padding: 8px;
            background-color: #fee2e2;
            color: #dc2626;
            border-radius: 4px;
            font-size: 0.9em;
        }
    </style>
{% endblock %}

{% block body %}
<div class="search-container">
    <form action="{{ path('admin_dashboard') }}" method="get" class="search-form" role="search">
        <input type="text" name="q" value="{{ searchQuery|default('')|e('html_attr') }}" 
               class="search-input" placeholder="Rechercher par pseudo..." 
               aria-label="Rechercher des utilisateurs par pseudo">
        <button type="submit" class="search-button" aria-label="Lancer la recherche">
            <ion-icon name="search-outline"></ion-icon>
            Rechercher
        </button>
    </form>
</div>

<div class="users-grid">
    {% for user in users %}
        <div class="user-card">
            <div style="display: flex; align-items: center;">
                <div class="user-avatar">
                    {% if user.photo %}
                        <img src="{{ asset('uploads/' ~ user.photo|e('url') ) }}" alt="{{ (user.prenom ~ ' ' ~ user.nom)|e('html_attr') }}">
                    {% else %}
                        <img src="{{ asset('uploads/default-avatar.jpg') }}" alt="Avatar par dÃ©faut">
                    {% endif %}
                </div>
                <div class="user-info">
                    <h3>{{ user.prenom|e }} {{ user.nom|e }}</h3>
                    <h3>{{ user.nickname|e }}</h3>
                    <p>{{ user.email|e }}</p>
                </div>
            </div>
            <div class="user-actions">
                <button class="report-btn"
                        title="Voir les rapports"
                        aria-label="Voir les rapports pour {{ (user.prenom ~ ' ' ~ user.nom)|e('html_attr') }}"
                        data-user-id="{{ user.id }}"
                        data-user-name="{{ (user.prenom ~ ' ' ~ user.nom)|e('js') }}"
                        data-csrf-token="{{ csrf_token('report_' ~ user.id) }}"
                        data-reports-url="{{ path('admin_user_reports', {'id': user.id}) }}">
                    <ion-icon name="warning-outline"></ion-icon>
                    Rapports ({{ user.reportCount|default(0) }})
                </button>
                {% if user.isBanned %}
                    <button class="unban-btn" 
                            title="DÃ©bannir l'utilisateur" 
                            aria-label="DÃ©bannir {{ (user.prenom ~ ' ' ~ user.nom)|e('html_attr') }}" 
                            data-user-id="{{ user.id }}" 
                            data-user-name="{{ (user.prenom ~ ' ' ~ user.nom)|e('js') }}"
                            data-csrf-token="{{ csrf_token('unban_' ~ user.id) }}">
                        <ion-icon name="checkmark-circle-outline"></ion-icon>
                        DÃ©bannir
                    </button>
                {% else %}
                    <button class="ban-btn" 
                            title="Bannir l'utilisateur" 
                            aria-label="Bannir {{ (user.prenom ~ ' ' ~ user.nom)|e('html_attr') }}" 
                            data-user-id="{{ user.id }}" 
                            data-user-name="{{ (user.prenom ~ ' ' ~ user.nom)|e('js') }}"
                            data-csrf-token="{{ csrf_token('ban_' ~ user.id) }}">
                        <ion-icon name="ban-outline"></ion-icon>
                        Bannir
                    </button>
                {% endif %}
            </div>
        </div>
    {% else %}
        <p>Aucun utilisateur trouvÃ©.</p>
    {% endfor %}
</div>

<div class="pagination-container">
    <div class="pagination-info">
        Affichage de la page {{ users.getCurrentPageNumber() }} sur {{ users.getPageCount() }} 
        ({{ users.getTotalItemCount() }} utilisateurs au total)
    </div>
    {{ knp_pagination_render(users, null, {}, {'align': 'center'}) }}
</div>

<!-- Modal pour les rapports -->
<div id="reportsModal" class="modal" role="dialog" aria-labelledby="reportsModalTitle">
    <div class="modal-content">
        <span class="close-modal" id="closeReportsModal" aria-label="Fermer la fenÃªtre des rapports">Ã</span>
        <h2 id="reportsModalTitle">Rapports pour <span id="userName"></span></h2>
        <div class="reports-list" id="reportsList">
            <!-- Les rapports seront chargÃ©s ici -->
        </div>
    </div>
</div>

<!-- Modal pour le bannissement -->
<div id="banModal" class="modal" role="dialog" aria-labelledby="banModalTitle">
    <div class="modal-content">
        <span class="close-modal" id="closeBanModal" aria-label="Fermer la fenÃªtre de bannissement">Ã</span>
        <h2 id="banModalTitle">Bannir l'utilisateur <span id="banUserName"></span></h2>
        <div class="ban-options">
            <button class="ban-option" data-duration="1" aria-label="Bannir pour 1 jour">1 Jour</button>
            <button class="ban-option" data-duration="7" aria-label="Bannir pour 1 semaine">1 Semaine</button>
            <button class="ban-option" data-duration="30" aria-label="Bannir pour 1 mois">1 Mois</button>
            <button class="ban-option" data-duration="0" aria-label="Bannir de faÃ§on permanente">Permanent</button>
        </div>
        <div class="ban-confirm" style="display: none;">
            <p>Ãtes-vous sÃ»r de vouloir bannir cet utilisateur pour <span id="selectedDuration"></span> ?</p>
            <div class="ban-buttons">
                <button class="confirm-ban" aria-label="Confirmer le bannissement">Confirmer</button>
                <button class="cancel-ban" aria-label="Annuler le bannissement">Annuler</button>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="module" src="https://unpkg.com/ionicons@7.4.0/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@7.4.0/dist/ionicons/ionicons.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const reportsModal = document.getElementById('reportsModal');
            const closeReportsBtn = document.getElementById('closeReportsModal');
            const banModal = document.getElementById('banModal');
            const closeBanBtn = document.getElementById('closeBanModal');
            const reportsList = document.getElementById('reportsList');
            const userNameSpan = document.getElementById('userName');
            const banUserName = document.getElementById('banUserName');
            const banOptions = document.querySelectorAll('.ban-option');
            const banConfirm = document.querySelector('.ban-confirm');
            const selectedDuration = document.getElementById('selectedDuration');
            const confirmBan = document.querySelector('.confirm-ban');
            const cancelBan = document.querySelector('.cancel-ban');
            let currentUserId = null;
            let selectedBanDuration = null;

            // Show reports modal
            document.querySelectorAll('.report-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const userId = this.dataset.userId;
                    const userName = this.dataset.userName;
                    const csrfToken = this.dataset.csrfToken;
                    const reportsUrl = this.dataset.reportsUrl;

                    userNameSpan.textContent = userName;
                    reportsModal.style.display = 'block';
                    reportsModal.focus();

                    fetch(reportsUrl, {
                        headers: {
                            'X-CSRF-Token': csrfToken
                        }
                    })
                        .then(response => response.json())
                        .then(reports => {
                            reportsList.innerHTML = '';
                            if (reports.length === 0) {
                                reportsList.innerHTML = '<p>Aucun rapport pour cet utilisateur.</p>';
                                return;
                            }
                            reports.forEach(report => {
                                const reportItem = document.createElement('div');
                                reportItem.className = 'report-item';
                                const statusClass = `status-${report.status.toLowerCase()}`;
                                reportItem.innerHTML = `
                                    <div class="report-header">
                                        <span class="report-reason">${report.reason}</span>
                                        <span class="report-status ${statusClass}">${report.status}</span>
                                    </div>
                                    <div class="report-details">
                                        <div class="reporter-info">
                                            <span class="reporter-label">SignalÃ© par :</span>
                                            <span class="reporter-name">${report.reporter.name}</span>
                                            <span class="reporter-nickname">(${report.reporter.nickname})</span>
                                        </div>
                                        ${report.evidence ? `<p class="report-evidence">Preuve : ${report.evidence}</p>` : ''}
                                    </div>
                                    <div class="report-date">
                                        Date : ${new Date(report.created_at).toLocaleDateString('fr-FR')}
                                    </div>
                                `;
                                reportsList.appendChild(reportItem);
                            });
                        })
                        .catch(error => {
                            console.error('Erreur lors du chargement des rapports :', error);
                            reportsList.innerHTML = '<p>Erreur lors du chargement des rapports.</p>';
                        });
                });
            });

            // Show ban modal
            document.querySelectorAll('.ban-btn').forEach(button => {
                button.addEventListener('click', function() {
                    currentUserId = this.dataset.userId;
                    banUserName.textContent = this.dataset.userName;
                    banModal.style.display = 'block';
                    banConfirm.style.display = 'none';
                    banModal.focus();
                });
            });

            // Handle ban options
            banOptions.forEach(option => {
                option.addEventListener('click', function() {
                    selectedBanDuration = parseInt(this.dataset.duration);
                    let durationText = '';
                    switch(selectedBanDuration) {
                        case 1: durationText = '1 jour'; break;
                        case 7: durationText = '1 semaine'; break;
                        case 30: durationText = '1 mois'; break;
                        case 0: durationText = 'permanent'; break;
                    }
                    selectedDuration.textContent = durationText;
                    banConfirm.style.display = 'block';
                });
            });

            // Confirm ban
            confirmBan.addEventListener('click', function() {
                if (currentUserId && selectedBanDuration !== null) {
                    const csrfToken = document.querySelector(`.ban-btn[data-user-id="${currentUserId}"]`).dataset.csrfToken;
                    fetch(`{{ path('admin_user_ban') }}/${currentUserId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': csrfToken
                        },
                        body: JSON.stringify({ duration: selectedBanDuration })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                window.location.reload();
                            } else {
                                alert('Erreur lors du bannissement : ' + (data.message || 'Erreur inconnue'));
                            }
                        })
                        .catch(error => {
                            console.error('Erreur :', error);
                            alert('Erreur lors du bannissement');
                        });
                }
                banModal.style.display = 'none';
            });

            // Cancel ban
            cancelBan.addEventListener('click', function() {
                banModal.style.display = 'none';
            });

            // Unban user
            document.querySelectorAll('.unban-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const userId = this.dataset.userId;
                    const userName = this.dataset.userName;
                    const csrfToken = this.dataset.csrfToken;
                    if (confirm(`Voulez-vous dÃ©bannir ${userName} ?`)) {
                        fetch(`{{ path('admin_user_unban') }}/${userId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': csrfToken
                            }
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    window.location.reload();
                                } else {
                                    alert('Erreur lors du dÃ©bannissement : ' + (data.message || 'Erreur inconnue'));
                                }
                            })
                            .catch(error => {
                                console.error('Erreur :', error);
                                alert('Erreur lors du dÃ©bannissement');
                            });
                    }
                });
            });

            // Close modals
            closeReportsBtn.addEventListener('click', () => {
                reportsModal.style.display = 'none';
            });
            closeBanBtn.addEventListener('click', () => {
                banModal.style.display = 'none';
            });

            // Close modals on outside click
            window.addEventListener('click', function(event) {
                if (event.target === reportsModal) {
                    reportsModal.style.display = 'none';
                }
                if (event.target === banModal) {
                    banModal.style.display = 'none';
                }
            });

            // Close modals with Escape key
            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    reportsModal.style.display = 'none';
                    banModal.style.display = 'none';
                }
            });

            // Trap focus in modals
            function trapFocus(modal) {
                const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
                const firstElement = focusableElements[0];
                const lastElement = focusableElements[focusableElements.length - 1];

                modal.addEventListener('keydown', function(event) {
                    if (event.key === 'Tab') {
                        if (event.shiftKey) {
                            if (document.activeElement === firstElement) {
                                lastElement.focus();
                                event.preventDefault();
                            }
                        } else {
                            if (document.activeElement === lastElement) {
                                firstElement.focus();
                                event.preventDefault();
                            }
                        }
                    }
                });
            }

            trapFocus(reportsModal);
            trapFocus(banModal);
        });
    </script>
{% endblock %}