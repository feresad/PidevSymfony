{% extends 'base.html.twig' %}

{% block title %}Créez votre compte{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .register-container {
            background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url("{{ asset('uploads/dariusGG.jpg') }}");
        }
    </style>
    <link rel="preload" href="{{ asset('uploads/dariusGG.jpg') }}" as="image">
    <link rel="stylesheet" href="{{ asset('css/register.css') }}">
{% endblock %}

{% block body %}
<div class="register-container">
    <div class="register-form-container">
        <h1>Créez votre compte</h1>
        <p class="subtitle">Remplissez les informations ci-dessous</p>

        {% for flash_error in app.flashes('verify_email_error') %}
            <div class="alert alert-danger" role="alert">{{ flash_error }}</div>
        {% endfor %}

        {{ form_start(registrationForm, {'attr': {'class': 'registration-form', 'onsubmit': 'return validateForm(event)'}}) }}
            {% if not registrationForm.vars.valid %}
                <div class="alert alert-danger">
                    {{ form_errors(registrationForm) }}
                </div>
            {% endif %}

            <div class="form-group">
                {{ form_label(registrationForm.nom) }}
                {{ form_widget(registrationForm.nom) }}
                <div class="error-message">
                    {{ form_errors(registrationForm.nom) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.prenom) }}
                {{ form_widget(registrationForm.prenom) }}
                <div class="error-message">
                    {{ form_errors(registrationForm.prenom) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.email) }}
                {{ form_widget(registrationForm.email) }}
                <div class="error-message">
                    {{ form_errors(registrationForm.email) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.nickname) }}
                {{ form_widget(registrationForm.nickname) }}
                <div class="error-message">
                    {{ form_errors(registrationForm.nickname) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.numero) }}
                {{ form_widget(registrationForm.numero) }}
                <div class="error-message">
                    {{ form_errors(registrationForm.numero) }}
                </div>
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.plainPassword.first) }}
                {{ form_widget(registrationForm.plainPassword.first) }}
                <div class="error-message">
                    {{ form_errors(registrationForm.plainPassword.first) }}
                </div>
                <div class="password-requirements">
                    Le mot de passe doit contenir :
                    <ul>
                        <li>Au moins 8 caractères</li>
                        <li>Au moins une lettre majuscule</li>
                        <li>Au moins une lettre minuscule</li>
                        <li>Au moins un chiffre</li>
                        <li>Au moins un caractère spécial (@$!%*#?&)</li>
                    </ul>
                </div>
                <div class="password-strength"></div>
            </div>

            <div class="form-group">
                {{ form_label(registrationForm.plainPassword.second) }}
                {{ form_widget(registrationForm.plainPassword.second) }}
                <div class="error-message">
                    {{ form_errors(registrationForm.plainPassword.second) }}
                </div>
            </div>

            <button type="submit" class="btn-register">S'inscrire</button>

            <div class="login-link">
                Déjà enregistré ? <a href="{{ path('app_login_page') }}">Se connecter</a>
            </div>
        {{ form_end(registrationForm) }}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.querySelector('#{{ registrationForm.plainPassword.first.vars.id }}');
            const strengthIndicator = document.querySelector('.password-strength');
            const requirements = document.querySelectorAll('.password-requirements li');
            const numeroInput = document.querySelector('#{{ registrationForm.numero.vars.id }}');
            
            // Add input validation for number field
            numeroInput.addEventListener('input', function(e) {
                // Remove any non-numeric characters
                this.value = this.value.replace(/[^0-9]/g, '');
            });

            // Prevent paste of non-numeric content
            numeroInput.addEventListener('paste', function(e) {
                e.preventDefault();
                const pastedText = (e.clipboardData || window.clipboardData).getData('text');
                const numericText = pastedText.replace(/[^0-9]/g, '');
                document.execCommand('insertText', false, numericText);
            });
            
            function checkPasswordStrength(password) {
                let strength = 0;
                const checks = {
                    length: password.length >= 8,
                    uppercase: /[A-Z]/.test(password),
                    lowercase: /[a-z]/.test(password),
                    numbers: /[0-9]/.test(password),
                    special: /[@$!%*#?&]/.test(password)
                };
                
                // Update requirements list
                requirements[0].style.color = checks.length ? '#4caf50' : '#666';
                requirements[1].style.color = checks.uppercase ? '#4caf50' : '#666';
                requirements[2].style.color = checks.lowercase ? '#4caf50' : '#666';
                requirements[3].style.color = checks.numbers ? '#4caf50' : '#666';
                requirements[4].style.color = checks.special ? '#4caf50' : '#666';
                
                // Calculate strength
                strength = Object.values(checks).filter(Boolean).length;
                return strength;
            }
            
            passwordInput.addEventListener('input', function() {
                const strength = checkPasswordStrength(this.value);
                strengthIndicator.className = 'password-strength';
                
                if (strength >= 5) {
                    strengthIndicator.classList.add('strength-strong');
                } else if (strength >= 3) {
                    strengthIndicator.classList.add('strength-medium');
                } else if (strength > 0) {
                    strengthIndicator.classList.add('strength-weak');
                }
            });

            // Form validation
            function validateForm(event) {
                const form = event.target;
                let isValid = true;
                let firstErrorField = null;

                // Check all required fields
                const requiredFields = form.querySelectorAll('[required]');
                requiredFields.forEach(field => {
                    if (!field.value) {
                        isValid = false;
                        if (!firstErrorField) {
                            firstErrorField = field;
                        }
                    }
                });

                if (!isValid) {
                    event.preventDefault();
                    if (firstErrorField) {
                        firstErrorField.focus();
                    }
                    return false;
                }

                return true;
            }
        });
    </script>
{% endblock %} 