{% extends 'base.html.twig' %}

{% block title %}Paiement - {{ stock.produit.nomProduit }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .payment-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 30px;
            background-color: rgba(26, 30, 34, 0.4);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.08);
            border-radius: 12px;
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.2);
        }
        
        .payment-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .payment-title {
            color: #ffffff;
            font-size: 24px;
            margin-bottom: 10px;
            text-transform: uppercase;
        }
        
        .payment-subtitle {
            color: #808080;
            font-size: 16px;
        }
        
        .product-summary {
            display: flex;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 20px;
        }
        
        .product-details {
            flex: 1;
        }
        
        .product-name {
            color: #ffffff;
            font-size: 18px;
            margin-bottom: 5px;
        }
        
        .product-price {
            color: #dd163b;
            font-size: 20px;
            font-weight: bold;
        }
        
        .payment-form {
            margin-bottom: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            color: #ffffff;
            margin-bottom: 8px;
            font-size: 14px;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            color: #ffffff;
            font-size: 16px;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #dd163b;
        }
        
        .form-row {
            display: flex;
            gap: 15px;
        }
        
        .form-row .form-group {
            flex: 1;
        }
        
        .payment-button {
            background-color: #dd163b;
            color: #ffffff;
            padding: 15px 30px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            text-transform: uppercase;
            width: 100%;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        
        .payment-button:hover {
            background-color: #b31230;
        }
        
        .payment-button:disabled {
            background-color: #555555;
            cursor: not-allowed;
        }
        
        .payment-status {
            text-align: center;
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            font-weight: bold;
        }
        
        .status-pending {
            background-color: rgba(255, 193, 7, 0.2);
            color: #ffc107;
        }
        
        .status-completed {
            background-color: rgba(40, 167, 69, 0.2);
            color: #28a745;
        }
        
        .status-failed {
            background-color: rgba(220, 53, 69, 0.2);
            color: #dc3545;
        }
        
        .back-button {
            display: inline-block;
            margin-top: 20px;
            color: #808080;
            text-decoration: none;
            font-size: 14px;
        }
        
        .back-button:hover {
            color: #dd163b;
        }
        
        #card-element {
            padding: 12px 15px;
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        #card-errors {
            color: #dc3545;
            margin-top: 10px;
            font-size: 14px;
        }
        
        .loading-spinner {
            display: none;
            text-align: center;
            margin: 20px 0;
        }
        
        .spinner {
            display: inline-block;
            width: 30px;
            height: 30px;
            border: 3px solid #dd163b;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
{% endblock %}

{% block body %}
    <!-- START: Breadcrumbs -->
    <div class="nk-gap-1"></div>
    <div class="container">
        <ul class="nk-breadcrumbs">
            <li><a href="{{ path('app_home') }}">HOME</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><a href="{{ path('app_store') }}">STORE</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><a href="{{ path('app_store_product', {'id': product.id}) }}">{{ stock.produit.nomProduit }}</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><span>Paiement</span></li>
        </ul>
    </div>
    <div class="nk-gap-1"></div>
    <!-- END: Breadcrumbs -->

    <div class="container">
        <div class="payment-container">
            <div class="payment-header">
                <h1 class="payment-title">Paiement</h1>
                <p class="payment-subtitle">Finalisez votre commande</p>
            </div>
            
            <div class="product-summary">
                <img src="{{ image_base_url }}/{{ stock.image }}" alt="{{ stock.produit.nomProduit }}" class="product-image">
                <div class="product-details">
                    <h3 class="product-name">{{ stock.produit.nomProduit }}</h3>
                    <div class="product-price">{{ price_in_tnd|number_format(2, '.', ',') }} TND</div>
                    <div style="font-size: 12px; color: #aaa; margin-top: 5px;">Équivalent à environ {{ price_in_eur|number_format(2, '.', ',') }} EUR pour le paiement</div>
                </div>
            </div>
            
            <form id="payment-form" class="payment-form">
                <input type="hidden" id="product-id" value="{{ product.id }}">
                <input type="hidden" id="stripe-public-key" value="{{ stripe_public_key }}">
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="first-name" class="form-label">Prénom</label>
                        <input type="text" id="first-name" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="last-name" class="form-label">Nom</label>
                        <input type="text" id="last-name" class="form-control" required>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" id="email" class="form-control" value="{{ app.user.email }}" required>
                </div>
                
                <div class="form-group">
                    <label for="card-element" class="form-label">Informations de carte</label>
                    <div id="card-element"></div>
                    <div id="card-errors" role="alert"></div>
                </div>
                
                <button type="submit" id="submit-button" class="payment-button">
                    Payer {{ price_in_tnd|number_format(2, '.', ',') }} TND
                </button>
                <div style="text-align: center; margin-top: 10px; font-size: 12px; color: #aaa;">
                    Le paiement sera traité en euros ({{ price_in_eur|number_format(2, '.', ',') }} EUR)
                </div>
            </form>
            
            <div id="payment-status" class="payment-status status-pending" style="display: none;">
                Paiement en cours...
            </div>
            
            <div id="loading-spinner" class="loading-spinner">
                <div class="spinner"></div>
                <p>Traitement de votre paiement...</p>
            </div>
            
            <a href="{{ path('app_store_product', {'id': product.id}) }}" class="back-button">
                <i class="fas fa-arrow-left"></i> Retour au produit
            </a>
        </div>
    </div>
    
    <img class="nk-page-background-top" src="{{ asset('images/bg-top.png') }}" alt="">
    <img class="nk-page-background-bottom" src="{{ asset('images/bg-bottom.png') }}" alt="">
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Stripe
            const stripePublicKey = document.getElementById('stripe-public-key').value;
            const stripe = Stripe(stripePublicKey);
            const elements = stripe.elements();
            
            // Create card element
            const cardElement = elements.create('card', {
                style: {
                    base: {
                        color: '#ffffff',
                        fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                        fontSmoothing: 'antialiased',
                        fontSize: '16px',
                        '::placeholder': {
                            color: '#aab7c4'
                        }
                    },
                    invalid: {
                        color: '#dc3545',
                        iconColor: '#dc3545'
                    }
                },
                hidePostalCode: true
            });
            
            // Mount card element
            cardElement.mount('#card-element');
            
            // Handle validation errors
            cardElement.addEventListener('change', function(event) {
                const displayError = document.getElementById('card-errors');
                if (event.error) {
                    displayError.textContent = event.error.message;
                } else {
                    displayError.textContent = '';
                }
            });
            
            // Handle form submission
            const form = document.getElementById('payment-form');
            const submitButton = document.getElementById('submit-button');
            const paymentStatus = document.getElementById('payment-status');
            const loadingSpinner = document.getElementById('loading-spinner');
            
            form.addEventListener('submit', async function(event) {
                event.preventDefault();
                
                // Disable submit button and show loading spinner
                submitButton.disabled = true;
                loadingSpinner.style.display = 'block';
                paymentStatus.style.display = 'none';
                
                // Get form data
                const firstName = document.getElementById('first-name').value;
                const lastName = document.getElementById('last-name').value;
                const email = document.getElementById('email').value;
                const productId = document.getElementById('product-id').value;
                
                try {
                    // Create payment method
                    const { paymentMethod, error: paymentMethodError } = await stripe.createPaymentMethod({
                        type: 'card',
                        card: cardElement,
                        billing_details: {
                            name: firstName + ' ' + lastName,
                            email: email
                        }
                    });

                    if (paymentMethodError) {
                        throw new Error(paymentMethodError.message);
                    }

                    // Send payment method ID to server
                    const response = await fetch("{{ path('app_process_payment', {'id': stock.produit.id})|escape('js') }}", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            paymentMethodId: paymentMethod.id,
                            firstName: firstName,
                            lastName: lastName,
                            email: email
                        })
                    });

                    const data = await response.json();

                    // Hide loading spinner
                    loadingSpinner.style.display = 'none';

                    if (data.success) {
                        // Payment successful
                        paymentStatus.textContent = 'Paiement terminé avec succès!';
                        paymentStatus.className = 'payment-status status-completed';
                        paymentStatus.style.display = 'block';
                        
                        // Redirect to success page after 3 seconds to allow time for server processing
                        setTimeout(function() {
                            window.location.href = "{{ path('app_payment_success', {'id': '__ID__'})|escape('js') }}".replace('__ID__', data.orderId);
                        }, 3000);
                    } else if (data.requires_action) {
                        // Handle 3D Secure authentication
                        const { error: confirmError, paymentIntent } = await stripe.confirmCardPayment(data.payment_intent_client_secret);
                        if (confirmError) {
                            throw new Error(confirmError.message);
                        }

                        // After 3D Secure, retry the payment
                        const retryResponse = await fetch("{{ path('app_process_payment', {'id': stock.produit.id})|escape('js') }}", {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                paymentMethodId: paymentMethod.id,
                                firstName: firstName,
                                lastName: lastName,
                                email: email
                            })
                        });

                        const retryData = await retryResponse.json();

                        if (retryData.success) {
                            paymentStatus.textContent = 'Paiement terminé avec succès!';
                            paymentStatus.className = 'payment-status status-completed';
                            paymentStatus.style.display = 'block';
                            
                            setTimeout(function() {
                                window.location.href = "{{ path('app_payment_success', {'id': '__ID__'})|escape('js') }}".replace('__ID__', retryData.orderId);
                            }, 2000);
                        } else {
                            throw new Error(retryData.error || 'Échec de la vérification 3D Secure.');
                        }
                    } else {
                        throw new Error(data.error || 'Une erreur est survenue. Veuillez réessayer.');
                    }
                } catch (error) {
                    // Hide loading spinner
                    loadingSpinner.style.display = 'none';
                    
                    // Show error
                    paymentStatus.textContent = error.message;
                    paymentStatus.className = 'payment-status status-failed';
                    paymentStatus.style.display = 'block';
                    
                    // Re-enable submit button
                    submitButton.disabled = false;
                }
            });
        });
    </script>
{% endblock %}