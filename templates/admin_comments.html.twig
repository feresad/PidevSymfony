{% extends 'baseadmin.html.twig' %}

{% block title %}Admin Comments Management{% endblock %}

{% block body %}
<div class="container">
    <h2 class="mt-4 mb-4">Admin Comments Management</h2>

    {% if question %}
        <!-- Question Card -->
        <div class="card mb-4 question-card" id="question-card-{{ question.id }}">
            <div class="card-body d-flex align-items-start">
                <div class="vote-section me-4 text-center">
                    <button class="vote-btn upvote-btn voting-button upvote" data-id="{{ question.id }}" data-type="question" data-vote-type="UP">
                        <ion-icon name="arrow-up-outline"></ion-icon>
                    </button>
                    <span class="vote-count d-block my-1">{{ question.votes|default(0) }}</span>
                    <button class="vote-btn downvote-btn voting-button downvote" data-id="{{ question.id }}" data-type="question" data-vote-type="DOWN">
                        <ion-icon name="arrow-down-outline"></ion-icon>
                    </button>
                </div>
                <div class="content-section flex-grow-1">
                    <h5 class="card-title mb-1">{{ question.title }}</h5>
                    <p class="card-text">{{ question.content }}</p>
                    {% if question.image %}
                        <div class="mt-2">
                            <img src="{{ image_base_url2 ~ question.image }}" alt="Question Image" class="img-fluid rounded topic-media">
                        </div>
                    {% endif %}
                    {% if question.video %}
                        <div class="mt-2">
                            <video controls class="rounded topic-media">
                                <source src="{{ image_base_url2 ~ question.video }}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    {% endif %}
                    <div class="reactions mt-2 d-flex align-items-center">
                        <div class="reaction-display me-3" data-id="{{ question.id }}" data-type="question">
                            {% for emoji, count in question.reactionCounts|default([]) %}
                                <span class="reaction-item" data-emoji="{{ emoji }}">{{ emoji }} {{ count }}</span>
                            {% endfor %}
                        </div>
                    </div>
                    <div class="actions mt-3 d-flex gap-2">
                        <button class="btn btn-sm btn-outline-secondary reply-btn" data-id="0" data-question-id="{{ question.id }}">
                            <ion-icon name="return-down-forward-outline"></ion-icon> Repondre
                        </button>
                        <button type="button" class="btn btn-sm btn-primary edit-question-btn" data-id="{{ question.id }}">
                            Modif
                        </button>
                        <button type="button" class="btn btn-sm btn-danger delete-question-btn" data-id="{{ question.id }}" data-title="{{ question.title }}">
                            Supp
                        </button>
                        <button class="btn btn-sm btn-outline-secondary share-question-btn" data-id="{{ question.id }}">
                            <ion-icon name="share-social-outline"></ion-icon>
                        </button>
                        <div class="reaction-wrapper">
                            <button class="btn btn-sm btn-outline-secondary reaction-icon" data-id="{{ question.id }}" data-type="question">
                                <ion-icon name="happy-outline"></ion-icon>
                            </button>
                        </div>
                    </div>
                    <!-- Reply Form Container for Question -->
                    <div id="reply-form-0" class="reply-form mt-3" style="display: none;">
                        <form class="profanity-check-form" action="{{ path('admin_comments_create', {'id': question.id}) }}" method="POST">
                            <input type="hidden" name="comment_form[parent_commentaire_id]" value="0">
                            <div class="mb-3">
                                <label for="reply_content_0" class="form-label">Reply</label>
                                <textarea id="reply_content_0" name="comment_form[contenu]" class="form-control" rows="3" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Emotes</label>
                                <div class="emotes-options d-flex gap-2">
                                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addEmote('üòä', 'reply_content_0')">üòä</button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addEmote('üòÇ', 'reply_content_0')">üòÇ</button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addEmote('‚ù§Ô∏è', 'reply_content_0')">‚ù§Ô∏è</button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addEmote('üëç', 'reply_content_0')">üëç</button>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary">Soumettre</button>
                            <button type="button" class="btn btn-secondary cancel-reply-btn" data-id="0">Cancel</button>
                        </form>
                    </div>
                </div>
                <div class="activity-section text-center">
                    {% if question.gameImage %}
                        <img src="{{ image_base_url2 ~ question.gameImage }}" alt="Game Image" class="rounded-circle mb-2" style="width: 50px; height: 50px;">
                    {% else %}
                        <img src="{{ asset('assets/images/default-game.jpg') }}" alt="Default Game Image" class="rounded-circle mb-2" style="width: 50px; height: 50px;">
                    {% endif %}
                    <div class="small">{{ question.utilisateurId.nickname|default('Unknown') }}</div>
                    <div class="small text-muted">{{ question.createdAt|date('F j, Y') }}</div>
                </div>
            </div>
        </div>

        <!-- Update Question Modal Container -->
        <div id="update-question-modal-container-{{ question.id }}"></div>

        <!-- Comments Section -->
        <div class="comments-section mt-4">
            <h4>Commentaires</h4>
            <div class="comment-form mb-4">
                {{ form_start(comment_form, {'attr': {'class': 'profanity-check-form'}}) }}
                    <div class="mb-3">
                        {{ form_label(comment_form.contenu, 'Add a Comment', {'label_attr': {'class': 'form-label'}}) }}
                        {{ form_widget(comment_form.contenu, {'attr': {'class': 'form-control', 'rows': '4'}}) }}
                        {{ form_errors(comment_form.contenu) }}
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Emotes</label>
                        <div class="emotes-options d-flex gap-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addEmote('üòä', 'comment_form_contenu')">üòä</button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addEmote('üòÇ', 'comment_form_contenu')">üòÇ</button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addEmote('‚ù§Ô∏è', 'comment_form_contenu')">‚ù§Ô∏è</button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addEmote('üëç', 'comment_form_contenu')">üëç</button>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Soumettre</button>
                {{ form_end(comment_form) }}
            </div>

            <div id="comments-container">
                {% if comments|length > 0 %}
                    {% for comment in comments %}
                        {% include 'forum/_comment_card.html.twig' with {
                            'comment': comment,
                            'question_id': question.id,
                            'level': 0
                        } %}
                    {% endfor %}
                {% else %}
                    <div class="alert alert-info">Aucun commentaire pour l'instant.</div>
                {% endif %}
            </div>

            <!-- Pagination -->
            {% if pagination.totalPages > 1 %}
                <div class="row mt-4">
                    <div class="col-md-12 text-center">
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                                <li class="page-item {{ pagination.currentPage == 1 ? 'disabled' : '' }}">
                                    <a class="page-link" href="{{ path('admin_comments', {'id': question.id, 'page': pagination.currentPage - 1}) }}">
                                        <ion-icon name="chevron-back-outline"></ion-icon>
                                    </a>
                                </li>
                                {% if pagination.currentPage > 3 %}
                                    <li class="page-item"><a class="page-link" href="{{ path('admin_comments', {'id': question.id, 'page': 1}) }}">1</a></li>
                                    {% if pagination.currentPage > 4 %}
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    {% endif %}
                                {% endif %}
                                {% for i in max(1, pagination.currentPage - 2)..min(pagination.totalPages, pagination.currentPage + 2) %}
                                    <li class="page-item {{ pagination.currentPage == i ? 'active' : '' }}">
                                        <a class="page-link" href="{{ path('admin_comments', {'id': question.id, 'page': i}) }}">{{ i }}</a>
                                    </li>
                                {% endfor %}
                                {% if pagination.currentPage < pagination.totalPages - 2 %}
                                    {% if pagination.currentPage < pagination.totalPages - 3 %}
                                        <li class="page-item disabled"><span class="page-link">...</span></li>
                                    {% endif %}
                                    <li class="page-item"><a class="page-link" href="{{ path('admin_comments', {'id': question.id, 'page': pagination.totalPages}) }}">{{ pagination.totalPages }}</a></li>
                                {% endif %}
                                <li class="page-item {{ pagination.currentPage == pagination.totalPages ? 'disabled' : '' }}">
                                    <a class="page-link" href="{{ path('admin_comments', {'id': question.id, 'page': pagination.currentPage + 1}) }}">
                                        <ion-icon name="chevron-forward-outline"></ion-icon>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                        <div class="text-muted small">
                            Showing {{ (pagination.currentPage - 1) * pagination.itemsPerPage + 1 }}-{{ min(pagination.currentPage * pagination.itemsPerPage, pagination.totalItems) }}
                            of {{ pagination.totalItems }} comments
                        </div>
                    </div>
                </div>
            {% endif %}
        </div>
    {% else %}
        <div class="alert alert-danger">Question not found.</div>
    {% endif %}
</div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            background: #f8f9fa;
        }

        .container {
            padding: 20px;
            max-width: 1200px;
        }

        .question-card, .comment-card {
            background: #ffffff;
            border: none;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            margin-bottom: 1.5rem;
            overflow: hidden;
            width: 100%;
            max-width: 1000px;
        }

        .question-card:hover, .comment-card:hover {
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
            transform: translateY(-2px);
        }

        .card-body {
            padding: 1.5rem;
            background: #ffffff;
            display: flex;
            align-items: stretch;
        }

        .vote-section {
            width: 48px;
            flex-shrink: 0;
            padding: 0.5rem 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-right: 1.5rem;
        }

        .vote-btn {
            background: none;
            border: none;
            padding: 6px;
            cursor: pointer;
            transition: transform 0.2s ease, color 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .vote-btn ion-icon {
            font-size: 1.3rem;
            color: #adb5bd;
        }

        .vote-btn:hover ion-icon {
            color: #007bff;
            transform: scale(1.15);
        }

        .vote-btn.voted ion-icon {
            color: #007bff;
        }

        .vote-count {
            font-size: 1rem;
            color: #495057;
            font-weight: 600;
            margin: 0.25rem 0;
        }

        .content-section {
            flex: 1;
            padding: 0 1.5rem;
            overflow: hidden;
        }

        .card-title {
            margin-bottom: 1rem;
            font-size: 1.5rem;
            font-weight: 800;
            line-height: 1.4;
            color: #121212;
        }

        .card-text {
            color: #333;
            font-size: 1.1rem;
            line-height: 1.6;
            margin-bottom: 1.25rem;
            letter-spacing: 0.02em;
        }

        .topic-media {
            width: 100%;
            max-width: 800px;
            min-width: 500px;
            aspect-ratio: 16 / 9;
            object-fit: cover;
            display: block;
        }

        .reactions {
            gap: 12px;
            margin-top: 1rem;
        }

        .reaction-display {
            display: flex;
            gap: 6px;
            align-items: center;
            flex-wrap: wrap;
        }

        .reaction-item {
            background-color: #f1f3f5;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            transition: background-color 0.2s ease;
        }

        .reaction-item:hover {
            background-color: #e9ecef;
        }

        .reaction-wrapper {
            position: relative;
        }

        .reaction-icon {
            border-radius: 8px;
            transition: background-color 0.2s ease;
        }

        .reaction-icon ion-icon {
            font-size: 1.1rem;
        }

        .reaction-icon:hover {
            background: none;
            border: none;
        }

        .emoji-picker-container {
            position: absolute;
            top: 100%;
            left: 0;
            background-color: #ffffff;
            border: 1px solid #dee2e6;
            padding: 12px;
            border-radius: 8px;
            max-width: 220px;
            max-height: 240px;
            overflow-y: auto;
            z-index: 1000;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .emoji-section {
            margin-bottom: 12px;
        }

        .emoji-section h4 {
            color: #6c757d;
            font-size: 0.85rem;
            font-weight: 600;
            margin-bottom: 6px;
        }

        .emoji-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 10px;
        }

        .emoji-option {
            cursor: pointer;
            font-size: 1.3rem;
            padding: 5px;
            text-align: center;
            border-radius: 4px;
            transition: background-color 0.2s ease;
        }

        .emoji-option:hover {
            background-color: #007bff;
            color: #ffffff;
        }

        .activity-section {
            width: 150px;
            flex-shrink: 0;
            text-align: center;
            padding: 0.5rem 1rem;
            margin-left: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .activity-section img {
            object-fit: cover;
            border: 1px solid #dee2e6;
            margin-bottom: 0.75rem;
        }

        .activity-section .small {
            color: #6c757d;
            font-size: 0.8rem;
            line-height: 1.4;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 100%;
        }

        .actions {
            gap: 8px;
            margin-top: 1.5rem;
            align-items: center;
        }

        .btn-sm {
            font-size: 0.85rem;
            padding: 0.35rem 0.75rem;
            border-radius: 8px;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            transition: background-color 0.2s ease, transform 0.2s ease;
        }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
            transform: translateY(-1px);
        }

        .btn-danger {
            background-color: #fe0369;
            border-color: #fe0369;
            transition: background-color 0.2s ease, transform 0.2s ease;
        }

        .btn-danger:hover {
            background-color: rgb(184, 0, 73);
            border-color: #fe0369;
            transform: translateY(-1px);
        }

        .btn-outline-secondary {
            color: #6c757d;
            border-color: #6c757d;
            transition: background-color 0.2s ease, transform 0.2s ease;
        }

        .btn-outline-secondary:hover {
            background-color: #f1f3f5;
            color: #495057;
            transform: translateY(-1px);
        }

        .pagination .page-link {
            color: #495057;
            background-color: #ffffff;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            margin: 0 3px;
            transition: background-color 0.2s ease;
        }

        .pagination .page-item.active .page-link {
            background-color: #007bff;
            border-color: #007bff;
            color: #ffffff;
        }

        .pagination .page-item.disabled .page-link {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .comments-section {
            max-width: 1000px;
            margin: 0 auto;
        }

        .comment-card {
            margin-left: calc(20px * var(--level, 0));
            transition: all 0.3s ease;
        }

        .comment-content {
            font-size: 1rem;
            color: #333;
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .reply-form form {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid #dee2e6;
        }

        .toggle-replies-btn {
            background: none;
            border: none;
            color: #007bff;
            cursor: pointer;
            font-size: 0.9rem;
            padding: 0;
            margin-right: 10px;
        }

        .toggle-replies-btn:hover {
            text-decoration: underline;
        }

        .child-comments {
            margin-top: 1rem;
            display: none;
        }

        .child-comments.show {
            display: block;
        }

        .floating-modal {
            background: none;
        }

        .floating-modal .modal-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            margin: 0;
            width: 100%;
            max-width: 500px;
        }

        .floating-modal .modal-content {
            background-color: #ffffff;
            color: #1a1a1a;
            border: 1px solid #dee2e6;
            border-radius: 12px;
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
        }

        .floating-modal .modal-header {
            border-bottom: none;
            padding: 1rem 1.5rem;
        }

        .floating-modal .modal-title {
            font-size: 1.1rem;
            font-weight: 700;
            text-transform: uppercase;
            color: #1a1a1a;
        }

        .floating-modal .modal-body {
            padding: 1.5rem;
        }

        .floating-modal .modal-footer {
            border-top: none;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .floating-modal .modal-footer {
            border-top: none;
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .floating-modal .btn-close {
            background: none;
            border: none;
            font-size: 1.2rem;
            color: #6c757d;
            opacity: 1;
        }

        .floating-modal .btn-close:hover {
            color: #1a1a1a;
        }

        .form-control, .form-select {
            background-color: #ffffff;
            color: #1a1a1a;
            border: 1px solid #ced4da;
            border-radius: 8px;
        }

        .form-control:focus, .form-select:focus {
            background-color: #ffffff;
            color: #1a1a1a;
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        }

        @media (max-width: 1200px) {
            .container {
                max-width: 1000px;
            }
            .question-card, .comment-card {
                max-width: 800px;
            }
            .topic-media {
                max-width: 600px;
                min-width: 400px;
            }
        }

        @media (max-width: 992px) {
            .container {
                max-width: 800px;
            }
            .question-card, .comment-card {
                max-width: 650px;
            }
            .activity-section {
                width: 120px;
                margin-left: 1.5rem;
            }
            .content-section {
                padding: 0 1rem;
            }
            .topic-media {
                max-width: 500px;
                min-width: 350px;
            }
        }

        @media (max-width: 768px) {
            .container {
                max-width: 600px;
            }
            .question-card, .comment-card {
                max-width: 100%;
            }
            .card-body {
                flex-direction: column;
                align-items: flex-start;
            }
            .vote-section {
                flex-direction: row;
                width: 100%;
                justify-content: flex-start;
                margin-bottom: 1.5rem;
                margin-right: 0;
            }
            .vote-btn {
                margin: 0 0.75rem;
            }
            .content-section {
                padding: 0;
                width: 100%;
            }
            .activity-section {
                width: 100%;
                margin-left: 0;
                margin-top: 1.5rem;
                text-align: left;
                flex-direction: row;
                align-items: center;
                gap: 1rem;
                padding: 0;
            }
            .activity-section img {
                margin-bottom: 0;
            }
            .topic-media {
                max-width: 100%;
                min-width: 100%;
            }
        }

        @media (max-width: 576px) {
            .container {
                padding: 15px;
                max-width: 100%;
            }
            .question-card, .comment-card {
                max-width: 100%;
            }
            .card-body {
                padding: 1rem;
            }
            .topic-media {
                max-width: 100%;
                min-width: 100%;
            }
            .floating-modal {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 1050;
            }
            .modal-backdrop {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 1040;
            }
        }

        .comment-content {
    transition: opacity 0.2s ease-in-out;
}
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function addEmote(emote, fieldId) {
            const contentField = document.querySelector('#' + fieldId);
            if (contentField) {
                contentField.value += emote;
            }
        }

        $(document).ready(function() {
            let sentimentMap = {
                positive: [],
                negative: [],
                neutral: []
            };

            function debounce(func, wait) {
                let timeout;
                return function(...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            function loadEmojis() {
                return $.ajax({
                    url: 'https://emoji-api.com/emojis?access_key=22b221fd734cfd73f62238bc32fa072f636bc63b',
                    method: 'GET',
                    cache: true
                }).then(emojis => {
                    const positiveGroups = ['smileys-emotion', 'people-body', 'activities', 'food-drink'];
                    const neutralGroups = ['travel-places', 'objects', 'animals-nature'];

                    emojis.forEach(emoji => {
                        const group = emoji.group;
                        const name = emoji.slug.toLowerCase();

                        if (positiveGroups.includes(group) || name.includes('smile') || name.includes('happy') || name.includes('love') || name.includes('laugh') || name.includes('party') || name.includes('cool')) {
                            if (sentimentMap.positive.length < 20) sentimentMap.positive.push(emoji.character);
                        }
                        else if (group === 'smileys-emotion' && (name.includes('sad') || name.includes('cry') || name.includes('angry') || name.includes('mad') || name.includes('frown') || name.includes('disappoint') || name.includes('frustrated') || name.includes('broken') || name.includes('rage') || name.includes('pout'))) {
                            if (sentimentMap.negative.length < 20) sentimentMap.negative.push(emoji.character);
                        }
                        else if (neutralGroups.includes(group) || name.includes('think') || name.includes('shrug') || name.includes('face') || name.includes('neutral') || name.includes('roll')) {
                            if (sentimentMap.neutral.length < 20) sentimentMap.neutral.push(emoji.character);
                        }
                    });

                    if (sentimentMap.positive.length < 10) sentimentMap.positive = ['üëç', 'üòä', 'üòÇ', '‚ù§Ô∏è', 'üéâ', 'üòç', 'üëè', 'üåü', 'üòé', 'üí™'];
                    if (sentimentMap.negative.length < 10) sentimentMap.negative = ['üëé', 'üò¢', 'üò°', 'üíî', 'üò§', 'üòû', 'ü§¨', 'üò£', 'üí¢', 'üò†'];
                    if (sentimentMap.neutral.length < 10) sentimentMap.neutral = ['ü§î', 'üòê', 'üôÇ', 'üëÄ', 'ü§∑', 'üò∂', 'ü§ù', 'üôÑ', 'üò¥', 'ü§ì'];

                    $.ajax({
                        url: '{{ path('api_update_sentiment_map') }}',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ sentimentMap: sentimentMap }),
                        success: function(response) {
                            if (!response.success) console.error('Failed to sync sentiment map:', response.message);
                        },
                        error: function() {
                            console.error('Failed to sync sentiment map with backend');
                        }
                    });
                }).catch(() => {
                    sentimentMap = {
                        positive: ['üëç', 'üòä', 'üòÇ', '‚ù§Ô∏è', 'üéâ', 'üòç', 'üëè', 'üåü', 'üòé', 'üí™'],
                        negative: ['üëé', 'üò¢', 'üò°', 'üíî', 'üò§', 'üòû', 'ü§¨', 'üò£', 'üí¢', 'üò†'],
                        neutral: ['ü§î', 'üòê', 'üôÇ', 'üëÄ', 'ü§∑', 'üò∂', 'ü§ù', 'üôÑ', 'üò¥', 'ü§ì']
                    };
                });
            }

            function fetchReactions(id, type, $display) {
                $.ajax({
                    url: '{{ path('react_action') }}',
                    method: 'POST',
                    data: { id: id, type: type, action: 'fetch' },
                    success: function(response) {
                        if (response.success) {
                            updateReactionDisplay($display, response.reactionCounts || {});
                        } else {
                            console.error('Failed to fetch reactions:', response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAX error fetching reactions:', status, error);
                    }
                });
            }

            function updateReactionDisplay($display, reactionCounts) {
                let reactionHtml = '';
                for (const [emoji, count] of Object.entries(reactionCounts)) {
                    reactionHtml += `<span class="reaction-item" data-emoji="${emoji}">${emoji} ${count}</span>`;
                }
                $display.html(reactionHtml);
            }

            function initializeReactions() {
                $('.reaction-display').each(function() {
                    const $display = $(this);
                    const id = $display.data('id');
                    const type = $display.data('type');
                    if ($display.children().length === 0) {
                        fetchReactions(id, type, $display);
                    }
                });
            }

            const showEmojiPicker = debounce(function($icon, id, type) {
                if (sentimentMap.positive.length === 0) return;

                $('.emoji-picker-container').remove();

                let pickerHtml = '<div class="emoji-picker-container">';
                
                pickerHtml += '<div class="emoji-section"><h4>Positive</h4><div class="emoji-grid">';
                sentimentMap.positive.forEach(emoji => {
                    pickerHtml += `<span class="emoji-option" data-emoji="${emoji}" data-id="${id}" data-type="${type}">${emoji}</span>`;
                });
                pickerHtml += '</div></div>';

                pickerHtml += '<div class="emoji-section"><h4>Negative</h4><div class="emoji-grid">';
                sentimentMap.negative.forEach(emoji => {
                    pickerHtml += `<span class="emoji-option" data-emoji="${emoji}" data-id="${id}" data-type="${type}">${emoji}</span>`;
                });
                pickerHtml += '</div></div>';

                pickerHtml += '<div class="emoji-section"><h4>Neutral</h4><div class="emoji-grid">';
                sentimentMap.neutral.forEach(emoji => {
                    pickerHtml += `<span class="emoji-option" data-emoji="${emoji}" data-id="${id}" data-type="${type}">${emoji}</span>`;
                });
                pickerHtml += '</div></div>';

                pickerHtml += '</div>';

                $('body').append(pickerHtml);
                const $newPicker = $('.emoji-picker-container');

                const iconOffset = $icon.offset();
                const iconHeight = $icon.outerHeight();
                const viewportHeight = $(window).height();
                const pickerHeight = $newPicker.outerHeight();
                let topPosition = iconOffset.top + iconHeight;
                if (topPosition + pickerHeight > viewportHeight) {
                    topPosition = iconOffset.top - pickerHeight;
                }
                $newPicker.css({
                    top: topPosition,
                    left: iconOffset.left
                }).fadeIn(100);

                $newPicker.data('reaction-wrapper', $icon.closest('.reaction-wrapper'));
            }, 200);

            loadEmojis().then(() => {
                initializeReactions();

                $(document).on('mouseenter', '.reaction-icon', function() {
                    const $icon = $(this);
                    const id = $icon.data('id');
                    const type = $icon.data('type');
                    showEmojiPicker($icon, id, type);
                });

                $(document).on('mouseenter', '.emoji-picker-container', function() {
                    $(this).stop().fadeIn(100);
                });

                $(document).on('mouseleave', '.reaction-wrapper', function(e) {
                    const $wrapper = $(this);
                    const $picker = $('.emoji-picker-container');
                    const relatedTarget = $(e.relatedTarget);

                    if ($picker.length && (relatedTarget.is($picker) || relatedTarget.closest('.emoji-picker-container').length)) {
                        return;
                    }

                    if ($picker.data('reaction-wrapper')?.is($wrapper)) {
                        $picker.fadeOut(100, function() {
                            $(this).remove();
                        });
                    }
                });

                $(document).on('mouseleave', '.emoji-picker-container', function(e) {
                    const $picker = $(this);
                    const $wrapper = $picker.data('reaction-wrapper');
                    const relatedTarget = $(e.relatedTarget);

                    if ($wrapper && (relatedTarget.is($wrapper) || relatedTarget.closest('.reaction-wrapper').length)) {
                        return;
                    }

                    $picker.fadeOut(100, function() {
                        $(this).remove();
                    });
                });

                $(document).on('click', '.emoji-option', function() {
                    const $emoji = $(this);
                    const emoji = $emoji.data('emoji');
                    const id = $emoji.data('id');
                    const type = $emoji.data('type');
                    const $display = $(`.reaction-display[data-id="${id}"]`);
                    const $picker = $('.emoji-picker-container');

                    $.ajax({
                        url: '{{ path('react_action') }}',
                        method: 'POST',
                        data: { id: id, type: type, emoji: emoji, action: 'react' },
                        success: function(response) {
                            if (response.success) {
                                updateReactionDisplay($display, response.reactionCounts);
                                $picker.fadeOut(100, function() {
                                    $(this).remove();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error',
                                    text: response.message,
                                    icon: 'error',
                                    background: '#fff',
                                    color: '#212529',
                                    confirmButtonColor: '#007bff'
                                });
                            }
                        },
                        error: function() {
                            Swal.fire({
                                title: 'Error',
                                text: 'Failed to save reaction',
                                icon: 'error',
                                background: '#fff',
                                color: '#212529',
                                confirmButtonColor: '#007bff'
                            });
                        }
                    });
                });
            });

            $(document).on('click', '.vote-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const id = $btn.data('id');
                const type = $btn.data('type');
                const voteType = $btn.data('vote-type');
                const $voteSection = $btn.closest('.vote-section');
                const $voteCount = $voteSection.find('.vote-count');

                $.ajax({
                    url: '{{ path('ajax_vote_action') }}',
                    method: 'POST',
                    data: { id: id, type: type, vote_type: voteType },
                    success: function(response) {
                        if (response.success) {
                            $voteCount.text(response.votes);
                            $btn.addClass('voted');
                        } else {
                            Swal.fire({
                                title: 'Voting Error',
                                text: response.message,
                                icon: 'error',
                                background: '#fff',
                                color: '#212529',
                                confirmButtonColor: '#007bff'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Voting Error',
                            text: 'An error occurred while voting. Please try again.',
                            icon: 'error',
                            background: '#fff',
                            color: '#212529',
                            confirmButtonColor: '#007bff'
                        });
                    }
                });
            });

            $(document).on('click', '.share-question-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const questionId = $btn.data('id');

                Swal.fire({
                    title: 'Share Question',
                    html: `
                        <p>Share this question on your favorite platform:</p>
                        <div class="share-options" style="display: flex; flex-direction: column; gap: 10px;">
                            <button class="swal2-confirm swal2-styled share-link facebook-share" data-id="${questionId}" style="background-color: #3b5998; color: white; padding: 10px; border-radius: 8px;">
                                <i class="fab fa-facebook-f me-2"></i> Facebook
                            </button>
                            <button class="swal2-confirm swal2-styled share-link reddit-share" data-id="${questionId}" style="background-color: #ff4500; color: white; padding: 10px; border-radius: 8px;">
                                <i class="fab fa-reddit-alien me-2"></i> Reddit
                            </button>
                            <button class="swal2-confirm swal2-styled share-link twitter-share" data-id="${questionId}" style="background-color: #1da1f2; color: white; padding: 10px; border-radius: 8px;">
                                <i class="fab fa-twitter me-2"></i> Twitter
                            </button>
                        </div>
                    `,
                    showCancelButton: true,
                    cancelButtonText: 'Close',
                    showConfirmButton: false,
                    background: '#fff',
                    color: '#212529',
                    cancelButtonColor: '#6c757d'
                });
            });

            $(document).on('click', '.share-link', function(e) {
                e.preventDefault();
                const $link = $(this);
                const questionId = $link.data('id');
                const platform = $link.hasClass('facebook-share') ? 'facebook' :
                                $link.hasClass('twitter-share') ? 'twitter' :
                                $link.hasClass('reddit-share') ? 'reddit' : null;

                if (!platform) return;

                $.ajax({
                    url: '{{ path('api_share_topic') }}',
                    method: 'GET',
                    data: { id: questionId },
                    success: function(response) {
                        if (response.success) {
                            const shareUrl = encodeURIComponent(response.url);
                            const title = response.title || '';
                            const content = response.content || '';
                            const shareText = encodeURIComponent(`${title}: \n${content}`);
                            let platformUrl;

                            switch (platform) {
                                case 'facebook':
                                    platformUrl = `https://www.facebook.com/sharer/sharer.php?u=${shareUrl}&e=${shareText}`;
                                    break;
                                case 'twitter':
                                    platformUrl = `https://twitter.com/intent/tweet?url=${shareUrl}&text=${shareText}`;
                                    break;
                                case 'reddit':
                                    platformUrl = `https://www.reddit.com/submit?url=${shareUrl}&title=${shareText}`;
                                    break;
                            }

                            if (platformUrl) {
                                window.open(platformUrl, '_blank', 'width=600,height=400');
                                Swal.close();
                            }
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'Failed to fetch share data.',
                                icon: 'error',
                                background: '#fff',
                                color: '#212529',
                                confirmButtonColor: '#007bff'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Error',
                            text: 'An error occurred while preparing to share.',
                            icon: 'error',
                            background: '#fff',
                            color: '#212529',
                            confirmButtonColor: '#007bff'
                        });
                    }
                });
            });

            $(document).on('click', '.delete-question-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const questionId = $btn.data('id');
                const questionTitle = $btn.data('title');
                const deleteUrl = '{{ path('admin_comments_delete_question', { id: 'PLACEHOLDER' }) }}'.replace('PLACEHOLDER', questionId);

                Swal.fire({
                    title: 'Delete Question',
                    html: `Are you sure you want to delete the question "<strong>${questionTitle}</strong>"? This action cannot be undone.`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonText: 'Cancel',
                    confirmButtonText: 'Delete',
                    background: '#fff',
                    color: '#212529'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = deleteUrl;
                    }
                });
            });

            $(document).on('click', '.delete-comment-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('id');
                const baseUrl = '{{ path('admin_comments_delete_comment', { id: 0 }) }}';
                const deleteUrl = baseUrl.replace('/0', '/' + commentId);

                Swal.fire({
                    title: 'Delete Comment',
                    html: `Are you sure you want to delete this comment? This action cannot be undone.`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonText: 'Cancel',
                    confirmButtonText: 'Delete',
                    background: '#fff',
                    color: '#212529'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: deleteUrl,
                            method: 'GET',
                            success: function(response) {
                                if (response.success) {
                                    $(`.comment-card[data-comment-id="${commentId}"]`).remove();
                                    Swal.fire({
                                        title: 'Success',
                                        text: 'Comment deleted successfully!',
                                        icon: 'success',
                                        background: '#fff',
                                        color: '#212529',
                                        confirmButtonColor: '#007bff'
                                    });
                                } else {
                                    Swal.fire({
                                        title: 'Error',
                                        text: response.message || 'Failed to delete comment.',
                                        icon: 'error',
                                        background: '#fff',
                                        color: '#212529',
                                        confirmButtonColor: '#007bff'
                                    });
                                }
                            },
                            error: function(xhr) {
                                let errorMessage = 'An error occurred while deleting the comment.';
                                if (xhr.responseJSON && xhr.responseJSON.message) {
                                    errorMessage = xhr.responseJSON.message;
                                }
                                Swal.fire({
                                    title: 'Error',
                                    text: errorMessage,
                                    icon: 'error',
                                    background: '#fff',
                                    color: '#212529',
                                    confirmButtonColor: '#007bff'
                                });
                            }
                        });
                    }
                });
            });

            $(document).on('click', '.edit-question-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const questionId = $btn.data('id');

                $.ajax({
                    url: `/admin/comments/fetch/question-update-form/${questionId}`,
                    method: 'GET',
                    success: function(response) {
                        if (response.success) {
                            $(`#update-question-modal-container-${questionId}`).html(response.html);
                            const $modal = $(`#updateQuestionModal-${questionId}`);
                            $modal.modal('show');
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'Failed to load the update form.',
                                icon: 'error',
                                background: '#fff',
                                color: '#212529',
                                confirmButtonColor: '#007bff'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Error',
                            text: 'An error occurred while loading the update form.',
                            icon: 'error',
                            background: '#fff',
                            color: '#212529',
                            confirmButtonColor: '#007bff'
                        });
                    }
                });
            });

            $(document).on('click', '.edit-comment-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('id');
                
                $.ajax({
                    url: `/admin/comments/fetch/update-form/${commentId}`,
                    method: 'GET',
                    success: function(response) {
                        if (response.success) {
                            $(`#update-form-container-${commentId}`).html(response.html).show();
                            const $textarea = $(`#update-form-container-${commentId} textarea`);
                            let content = $textarea.val();
                            content = content.replace(/<\/?[^>]+(>|$)/g, "");
                            $textarea.val(content);
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'Failed to load update form.',
                                icon: 'error',
                                background: '#fff',
                                color: '#212529',
                                confirmButtonColor: '#007bff'
                            });
                        }
                    },
                    error: function(xhr) {
                        let errorMessage = 'An error occurred while loading the update form.';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        Swal.fire({
                            title: 'Error',
                            text: errorMessage,
                            icon: 'error',
                            background: '#fff',
                            color: '#212529',
                            confirmButtonColor: '#007bff'
                        });
                    }
                });
            });

            $(document).on('click', '.cancel-update-btn', function(e) {
                e.preventDefault();
                const commentId = $(this).data('id');
                $(`#update-form-container-${commentId}`).hide().empty();
            });

            $(document).on('click', '.reply-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('id');
                
                $('.reply-form').not(`#reply-form-${commentId}`).hide();
                $(`#reply-form-${commentId}`).toggle();
            });

            $(document).on('click', '.cancel-reply-btn', function(e) {
                e.preventDefault();
                const commentId = $(this).data('id');
                $(`#reply-form-${commentId}`).hide();
            });

            $(document).on('click', '.toggle-replies-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('id');
                const $childComments = $(`#child-comments-${commentId}`);
                const isHidden = !$childComments.hasClass('show');

                $childComments.toggleClass('show');
                $btn.text(isHidden ? 'Hide Replies' : 'Show Replies');
            });

            function refreshComments() {
                const questionId = '{{ question.id }}';
                const currentPage = new URLSearchParams(window.location.search).get('page') || 1;
                $.ajax({
                    url: `/admin/comments/fetch/comments/${questionId}/${currentPage}`,
                    method: 'GET',
                    success: function(response) {
                        if (response.success) {
                            $('#comments-container').html(response.html);
                            initializeReactions();
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'Failed to refresh comments.',
                                icon: 'error',
                                background: '#fff',
                                color: '#212529',
                                confirmButtonColor: '#007bff'
                            });
                        }
                    },
                    error: function(xhr) {
                        let errorMessage = 'An error occurred while refreshing comments.';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        Swal.fire({
                            title: 'Error',
                            text: errorMessage,
                            icon: 'error',
                            background: '#fff',
                            color: '#212529',
                            confirmButtonColor: '#007bff'
                        });
                    }
                });
            }

            function refreshQuestion() {
                const questionId = '{{ question.id }}';
                $.ajax({
                    url: `/admin/comments/fetch/question/${questionId}`,
                    method: 'GET',
                    success: function(response) {
                        if (response.success) {
                            $(`#question-card-${questionId}`).replaceWith(response.html);
                            initializeReactions();
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'Failed to refresh question.',
                                icon: 'error',
                                background: '#fff',
                                color: '#212529',
                                confirmButtonColor: '#007bff'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Error',
                            text: 'An error occurred while refreshing the question.',
                            icon: 'error',
                            background: '#fff',
                            color: '#212529',
                            confirmButtonColor: '#007bff'
                        });
                    }
                });
            }

          $(document).on('submit', '.profanity-check-form', function(e) {
    e.preventDefault();
    const $form = $(this);
    const $textarea = $form.find('textarea[name="comment_form[contenu]"]');
    const title = $form.find('input[name*="[title]"]').val() || '';
    const content = $textarea.val() || '';
    const combinedContent = title + ' ' + content;

    const $submitButton = $form.find('button[type="submit"]');
    $submitButton.prop('disabled', true);

    $.ajax({
        url: '{{ path('api_check_profanity') }}',
        method: 'POST',
        data: { content: combinedContent },
        xhrFields: { withCredentials: true },
        success: function(response) {
            if (response.isProfane) {
                const profanityList = response.details ? response.details.map(m => m['text']).join(', ') : '';
                Swal.fire({
                    title: 'Inappropriate Content Detected',
                    html: 'Your content contains inappropriate language. Please revise it.<br><strong>Detected:</strong> ' + (profanityList || 'N/A'),
                    icon: 'warning',
                    background: '#fff',
                    color: '#212529',
                    confirmButtonColor: '#007bff'
                }).then(() => {
                    $submitButton.prop('disabled', false);
                });
            } else {
                const formAction = $form.attr('action');
                const formData = new FormData($form[0]);
                formData.set('comment_form[contenu]', content);

                const isUpdateQuestionForm = formAction.includes('forum_update_topic');
                const isCommentForm = formAction.includes('admin_comments_create');
                const isUpdateCommentForm = formAction.includes('admin_comments_update');
                const isReplyForm = $form.closest('.reply-form').length > 0;

                let url = formAction;
                if (isReplyForm) {
                    url = formAction + '?reply=true';
                }

                $.ajax({
                    url: url,
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    xhrFields: { withCredentials: true },
                    success: function(response) {
                        if (response.success) {
                            if (isUpdateQuestionForm) {
                                $form.closest('.modal').modal('hide');
                                refreshQuestion();
                            } else if (isCommentForm || isReplyForm) {
                                $form.find('textarea[name*="[contenu]"]').val('');
                                const $replyForm = $form.closest('.reply-form');
                                if ($replyForm.length) {
                                    $replyForm.hide();
                                }
                                window.location.reload(); // Keep reload for new comments/replies
                            } else if (isUpdateCommentForm) {
                                const commentId = $form.find('input[name*="[id]"]').val() || $form.data('comment-id');
                                const $commentContent = $(`.comment-card[data-comment-id="${commentId}"] .comment-content`);
                                const $updateFormContainer = $(`#update-form-container-${commentId}`);

                                $commentContent.fadeOut(200, function() {
                                    $commentContent.text(response.content).fadeIn(200);
                                });

                                $updateFormContainer.slideUp(200, function() {
                                    $(this).empty();
                                });

                                Swal.fire({
                                    title: 'Success',
                                    text: 'Comment updated successfully!',
                                    icon: 'success',
                                    background: '#fff',
                                    color: '#212529',
                                    confirmButtonColor: '#007bff'
                                });
                            }
                        } else {
                            console.error('Submission failed:', response.message);
                            Swal.fire({
                                title: 'Error',
                                text: response.message || 'An error occurred.',
                                icon: 'error',
                                background: '#fff',
                                color: '#212529',
                                confirmButtonColor: '#007bff'
                            });
                        }
                        $submitButton.prop('disabled', false);
                    },
                    error: function(xhr) {
                        console.error('AJAX error:', xhr.responseText);
                        let errorMessage = 'An error occurred. Please try again.';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        Swal.fire({
                            title: 'Error',
                            text: errorMessage,
                            icon: 'error',
                            background: '#fff',
                            color: '#212529',
                            confirmButtonColor: '#007bff'
                        });
                        $submitButton.prop('disabled', false);
                    }
                });
            }
        },
        error: function(xhr) {
            console.error('Profanity check failed:', xhr.responseText);
            Swal.fire({
                title: 'Error',
                text: 'Error checking profanity. Please try again.',
                icon: 'error',
                background: '#fff',
                color: '#212529',
                confirmButtonColor: '#007bff'
            }).then(() => {
                $submitButton.prop('disabled', false);
            });
        }
    });
});
        });
    </script>
{% endblock %}