{% extends 'base.html.twig' %}

{% block title %}Level OP | {{ question.title }}{% endblock %}

{% block body %}
    <div class="nk-gap-1"></div>
    <div class="container">
        <ul class="nk-breadcrumbs">
            <li><a href="{{ path('app_home') }}">Home</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><a href="{{ path('forum_index') }}">Forum</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><a href="{{ path('forum_topics') }}">Main Game Discussions</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><span>{{ question.title }}</span></li>
        </ul>
    </div>
    <div class="nk-gap-1"></div>

    <div class="container nk-forum-container">
        <div class="nk-gap-2"></div>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }}">{{ message }}</div>
            {% endfor %}
        {% endfor %}

        <ul class="nk-forum nk-forum-topic" id="forum-topic-list">
            <li data-id="{{ question.id }}" class="question-card">
                <div class="nk-forum-topic-author">
                    <a href="#">
                        <img src="{{ question.utilisateurId.getPhoto() ? 'http://localhost/img/games/' ~ question.utilisateurId.getPhoto() : asset('images/one-piece-luffy.gif') }}" alt="{{ question.utilisateurId.getNickname() }}">
                    </a>
                    <div class="nk-forum-topic-author-name" title="{{ question.utilisateurId.getNickname() }}">
                        <a href="#">{{ question.utilisateurId.getNickname() }}</a>
                    </div>
                    <div class="nk-forum-topic-author-role">{{ question.utilisateurId.getPrivilege() }}</div>
                    <div class="nk-forum-topic-author-since">
                        Membre depuis {{ question.utilisateurId.getId() ? question.utilisateurId.getId()|date('F d, Y') : 'Unknown' }}
                    </div>
                </div>
                <div class="nk-forum-topic-content">
                    <h3>{{ question.title }}</h3>
                    <p>{{ question.content }}</p>
                    {% if question.image %}
                        <div class="nk-forum-topic-attachments">
                            <h4 class="h5">Attachment</h4>
                            <img src="http://localhost/img/games/{{ question.image }}" alt="Topic Media" style="max-width: 300px;">
                        </div>
                    {% endif %}
                    {% if question.video %}
                        <div class="nk-forum-topic-attachments">
                            <h4 class="h5">Attachment</h4>
                            <video width="640" height="480" controls>
                                <source src="http://localhost/img/games/{{ question.video }}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    {% endif %}
                </div>
                <div class="nk-forum-topic-footer">
                    <div class="nk-forum-topic-footer-left">
                        <span class="nk-forum-topic-date">{{ question.createdAt|date('F d, Y') }}</span>
                    </div>
                    <div class="nk-forum-vote-section">
                        <button class="vote-btn upvote-btn voting-button upvote" data-id="{{ question.id }}" data-type="question" data-vote-type="UP" data-fallback="↑">
                            <img src="{{ asset('images/uppvote-emoji.png') }}" alt="Upvote" class="vote-icon">
                        </button>
                        <span class="vote-count">{{ question.votes|default(0) }}</span>
                        <button class="vote-btn downvote-btn voting-button downvote" data-id="{{ question.id }}" data-type="question" data-vote-type="DOWN" data-fallback="↓">
                            <img src="{{ asset('images/doownvote-emoji.png') }}" alt="Downvote" class="vote-icon">
                        </button>
                    </div>
                    <div class="nk-forum-reactions">
                        <div class="reaction-display" data-id="{{ question.id }}" data-type="question">
                            {% for emoji, count in question.reactionCounts|default([]) %}
                                <span class="reaction-item" data-emoji="{{ emoji }}">{{ emoji }} {{ count }}</span>
                            {% endfor %}
                        </div>
                        <div class="reaction-wrapper">
                            <img src="{{ asset('images/meme_icon.png') }}" alt="React" class="reaction-icon" data-id="{{ question.id }}" data-type="question">
                        </div>
                    </div>
                    <div class="nk-forum-topic-footer-right">
                        {% if question.gameImage %}
                            <div class="nk-forum-game-image">
                                <img src="http://localhost/img/games/{{ question.gameImage }}" alt="Game Image" style="max-width: 50px; margin-right: 15px;">
                            </div>
                        {% else %}
                            <div class="nk-forum-game-image">
                                <img src="{{ asset('assets/images/default-game.jpg') }}" alt="Default Game Image" style="max-width: 50px; margin-right: 15px;">
                            </div>
                        {% endif %}
                        <span class="nk-forum-action-btn reply-btn" data-id="{{ question.id }}" data-type="question">
                            <a href="#" class="nk-anchor">
                                <img src="{{ asset('images/comment_icon.png') }}" alt="Reply" class="action-icon">
                                <span class="reply-label">Repondre</span>
                            </a>
                        </span>
                        <span class="nk-forum-action-btn spam-btn" data-id="{{ question.id }}" data-type="question" data-user-id="{{ question.utilisateurId.id }}">
                            <a href="#" class="nk-anchor">
                                <span class="fa fa-flag"></span> Spam
                            </a>
                        </span>
                    </div>
                </div>
                <div class="reply-form-container" style="display: none;"></div>
            </li>

            {% macro render_comments(comments, level = 0, is_reply = false) %}
                {% for comment in comments %}
                    {% set is_low_quality = comment.votes|default(0) < -5 %}
                    <li data-id="{{ comment.id }}" class="comment-card {{ is_reply ? 'reply-card' : '' }} {{ is_low_quality ? 'low-quality-comment' : '' }}" style="margin-left: {{ level * 20 }}px; position: relative;">
                        <div class="nk-forum-topic-author">
                            <a href="#">
                                <img src="{{ comment.utilisateurId.getPhoto() ? 'http://localhost/img/games/' ~ comment.utilisateurId.getPhoto() : asset('images/one-piece-monkey-d-luffy.gif') }}" alt="{{ comment.utilisateurId.getNickname() }}">
                            </a>
                            <div class="nk-forum-topic-author-name" title="{{ comment.utilisateurId.getNickname() }}">
                                <a href="#">{{ comment.utilisateurId.getNickname() }}</a>
                            </div>
                            <div class="nk-forum-topic-author-role">{{ comment.utilisateurId.getPrivilege() }}</div>
                            <div class="nk-forum-topic-author-since">
                                Membre depuis {{ comment.utilisateurId.getId() ? comment.utilisateurId.getId()|date('F d, Y') : 'Unknown' }}
                            </div>
                        </div>
                        <div class="nk-forum-topic-content">
                            {% if comment.content starts with '@' %}
                                {% set parts = comment.content|split(' ', 2) %}
                                {% if parts|length > 1 %}
                                    <p><span class="mention">{{ parts[0] }}</span> {{ parts[1]|raw }}</p>
                                {% else %}
                                    <p>{{ comment.content|raw }}</p>
                                {% endif %}
                            {% else %}
                                <p>{{ comment.content|raw }}</p>
                            {% endif %}
                            {% if is_low_quality %}
                                <span class="low-quality-label">Low Quality (Votes: {{ comment.votes }})</span>
                            {% endif %}
                            <span class="sentiment-badge sentiment-{{ comment.sentiment }}">{{ comment.sentiment|capitalize }}</span>
                        </div>
                        <div class="nk-forum-topic-footer">
                            <div class="nk-forum-topic-footer-left">
                                <span class="nk-forum-topic-date">{{ comment.createdAt|date('F d, Y') }}</span>
                                <div class="nk-forum-reactions">
                                    <div class="reaction-display" data-id="{{ comment.id }}" data-type="comment">
                                        {% for emoji, count in comment.reactionCounts|default([]) %}
                                            <span class="reaction-item" data-emoji="{{ emoji }}">{{ emoji }} {{ count }}</span>
                                        {% endfor %}
                                    </div>
                                    <div class="reaction-wrapper">
                                        <img src="{{ asset('images/meme_icon.png') }}" alt="React" class="reaction-icon" data-id="{{ comment.id }}" data-type="comment">
                                    </div>
                                </div>
                            </div>
                            <div class="nk-forum-vote-section">
                                <button class="vote-btn upvote-btn voting-button upvote" data-id="{{ comment.id }}" data-type="comment" data-vote-type="UP" data-fallback="↑">
                                    <img src="{{ asset('images/uppvote-emoji.png') }}" alt="Upvote" class="vote-icon">
                                </button>
                                <span class="vote-count">{{ comment.votes|default(0) }}</span>
                                <button class="vote-btn downvote-btn voting-button downvote" data-id="{{ comment.id }}" data-type="comment" data-vote-type="DOWN" data-fallback="↓">
                                    <img src="{{ asset('images/doownvote-emoji.png') }}" alt="Downvote" class="vote-icon">
                                </button>
                            </div>
                            <div class="nk-forum-topic-footer-right">
                                {% if comment.childCommentaires is defined and comment.childCommentaires is not empty %}
                                    <span class="nk-forum-action-btn toggle-replies-btn" data-id="{{ comment.id }}">
                                        <a href="#" class="nk-anchor">
                                            <span class="fa fa-eye-slash"></span> Hide Replies ({{ comment.childCommentaires|length }})
                                        </a>
                                    </span>
                                {% endif %}
                                <span class="nk-forum-action-btn reply-btn" data-id="{{ comment.id }}" data-type="comment">
                                    <a href="#" class="nk-anchor">
                                        <img src="{{ asset('images/comment_icon.png') }}" alt="Reply" class="action-icon">
                                        <span class="reply-label">Repondre</span>
                                    </a>
                                </span>
                                {% if app.user and app.user.id == comment.utilisateurId.id %}
                                    <span class="nk-forum-action-btn update-btn" data-id="{{ comment.id }}">
                                        <a href="#" class="nk-anchor">
                                            <span class="fa fa-edit"></span> Modifier
                                        </a>
                                    </span>
                                    <span class="nk-forum-action-btn">
                                        <button type="button" class="nk-anchor delete-comment-btn" 
                                                data-comment-id="{{ comment.id }}" 
                                                data-comment-content="{{ comment.content|length > 50 ? comment.content|slice(0, 50) ~ '...' : comment.content }}"
                                                data-delete-url="{{ path('comment_delete', {'id': comment.id}) }}"
                                                data-csrf-token="{{ csrf_token('delete_comment_' ~ comment.id) }}">
                                            <span class="fa fa-trash"></span> Sup
                                        </button>
                                    </span>
                                {% endif %}
                                <span class="nk-forum-action-btn spam-btn" data-id="{{ comment.id }}" data-type="comment" data-user-id="{{ comment.utilisateurId.id }}">
                                    <a href="#" class="nk-anchor">
                                        <span class="fa fa-flag"></span> Spam
                                    </a>
                                </span>
                            </div>
                        </div>
                        <div class="reply-form-container" style="display: none;"></div>
                        <div class="update-form-container" style="display: none;"></div>
                    </li>
                    {% if comment.childCommentaires is defined and comment.childCommentaires is not empty %}
                        <ul class="child-comments" data-parent-id="{{ comment.id }}" style="display: block;">
                            {{ _self.render_comments(comment.childCommentaires, level + 1, true) }}
                        </ul>
                    {% endif %}
                {% endfor %}
            {% endmacro %}
            {% if comments|length > 0 %}
                {{ _self.render_comments(comments) }}
            {% else %}
                <li class="text-center">No comments found on this page.</li>
            {% endif %}
        </ul>

        <div class="nk-gap-2"></div>

        {% if comments|length > 0 %}
            <div class="row">
                <div class="col-md-12">
                    <div class="nk-pagination nk-pagination-center">
                        <a href="{{ path('forum_single_topic', {'id': question.id, 'page': pagination.currentPage - 1}) }}"
                           class="nk-pagination-prev {{ pagination.currentPage == 1 ? 'disabled' : '' }}">
                            <span class="ion-ios-arrow-back"></span>
                        </a>

                        <nav>
                            {% if pagination.currentPage > 3 %}
                                <a href="{{ path('forum_single_topic', {'id': question.id, 'page': 1}) }}">1</a>
                                {% if pagination.currentPage > 4 %}
                                    <span>...</span>
                                {% endif %}
                            {% endif %}

                            {% for i in max(1, pagination.currentPage - 2)..min(pagination.totalPages, pagination.currentPage + 2) %}
                                <a href="{{ path('forum_single_topic', {'id': question.id, 'page': i}) }}"
                                   class="{{ pagination.currentPage == i ? 'nk-pagination-current' : '' }}">
                                    {{ i }}
                                </a>
                            {% endfor %}

                            {% if pagination.currentPage < pagination.totalPages - 2 %}
                                {% if pagination.currentPage < pagination.totalPages - 3 %}
                                    <span>...</span>
                                {% endif %}
                                <a href="{{ path('forum_single_topic', {'id': question.id, 'page': pagination.totalPages}) }}">{{ pagination.totalPages }}</a>
                            {% endif %}
                        </nav>

                        <a href="{{ path('forum_single_topic', {'id': question.id, 'page': pagination.currentPage + 1}) }}"
                           class="nk-pagination-next {{ pagination.currentPage == pagination.totalPages ? 'disabled' : '' }}">
                            <span class="ion-ios-arrow-forward"></span>
                        </a>
                    </div>

                    <div class="text-center mt-2">
                        Showing {{ (pagination.currentPage - 1) * pagination.itemsPerPage + 1 }}-{{ min(pagination.currentPage * pagination.itemsPerPage, pagination.totalItems) }} 
                        of {{ pagination.totalItems }} comments
                    </div>
                </div>
            </div>
        {% endif %}

        <div class="nk-gap-2"></div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/single_topic.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
            background: url('{{ asset('images/jinx.jpg') }}') no-repeat center center fixed;
            background-size: cover;
            position: relative;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(28, 37, 38, 0.7); 
            backdrop-filter: blur(1px); 
            z-index: -1;
        }

        .nk-forum-container {
            background: rgba(10, 31, 40, 1) !important; 
            position: relative;
            z-index: 1; 
        }

        .nk-forum-reactions { display: flex; align-items: center; gap: 10px; }
        .reaction-display { display: flex; gap: 5px; }
        .reaction-item { 
            background-color: rgba(41, 49, 57, 0.8); 
            padding: 4px 8px; 
            border-radius: 3px; 
            font-size: 1.5rem; 
            line-height: 1; 
        }
        .reaction-wrapper { position: relative; display: inline-flex; align-items: center; }
        .reaction-icon { width: 24px; height: 24px; cursor: pointer; transition: transform 0.3s ease; }
        .reaction-icon:hover { transform: scale(1.1); }
        .emoji-picker-container {
            position: absolute;
            top: 100%;
            left: 0;
            background-color: rgba(35, 41, 48, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 10px;
            border-radius: 5px;
            z-index: 2000;
            width: 250px;
            max-height: 300px;
            overflow-y: auto;
        }
        .emoji-section { margin-bottom: 10px; }
        .emoji-section h4 { color: #d1d5db; font-size: 1rem; margin-bottom: 5px; }
        .emoji-grid { display: grid; grid-template-columns: repeat(5, 1fr); gap: 8px; }
        .emoji-option { cursor: pointer; font-size: 1.2rem; padding: 4px; text-align: center; }
        .emoji-option:hover { background-color: #0585e6; border-radius: 3px; }
        .nk-forum-topic-footer { display: flex; justify-content: space-between; align-items: center; position: relative; padding-bottom: 15px; }
        .nk-forum-topic-footer-left { display: flex; align-items: center; gap: 15px; }
        .comment-card .nk-forum-vote-section { display: flex; align-items: center; gap: 5px; margin-top: 0; position: static; transform: none; }
        .question-card .nk-forum-vote-section { display: flex; align-items: center; gap: 5px; }
        .comment-card .nk-forum-topic-footer-right { display: flex; align-items: center; gap: 15px; position: static; transform: none; }
        .question-card .nk-forum-topic-footer-right { display: flex; align-items: center; gap: 15px; }
        .action-icon { width: 14px; height: 14px; vertical-align: middle; margin-right: 5px; }
        .reply-label { color: #fe0369; font-size: 0.9rem; vertical-align: middle; }
        .nk-forum-action-btn a { display: inline-flex; align-items: center; color: #d1d5db; font-size: 0.9rem; text-decoration: none; transition: color 0.3s ease; }
        .nk-forum-action-btn a:hover { color: #0585e6; }
        .nk-forum-action-btn .fa { font-size: 14px; margin-right: 5px; }
        .nk-forum-action-btn button.nk-anchor { display: inline-flex; align-items: center; color: #d1d5db; font-size: 0.9rem; text-decoration: none; transition: color 0.3s ease; background: none; border: none; padding: 0; cursor: pointer; }
        .nk-forum-action-btn button.nk-anchor:hover { color: #0585e6; }
        .vote-icon { width: 20px; height: 20px; }
        .vote-btn.voted { opacity: 0.5; cursor: not-allowed; }
        .low-quality-label { color: #ff6f61; font-size: 0.8rem; font-style: italic; margin-top: 5px; display: block; }
        .sentiment-badge {
            margin-top: 5px;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
            text-transform: uppercase;
            display: inline-block;
        }
        .sentiment-positive { background-color: rgba(40, 167, 69, 0.8); color: #fff; }
        .sentiment-negative { background-color: rgba(220, 53, 69, 0.8); color: #fff; }
        .sentiment-neutral { background-color: rgba(108, 117, 125, 0.8); color: #fff; }
        .reply-card .nk-forum-topic-author img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
        }
        .mention {
            color: #007bff;
            font-weight: bold;
            text-decoration: none;
            transition: color 0.3s ease;
        }
        .mention:hover {
            color: #0056b3;
            text-decoration: underline;
        }

        /* Glassmorphism for Cards with Adjusted Dark Blue Hue */
        .nk-forum-topic .question-card,
        .nk-forum-topic .comment-card {
            background: rgba(20, 40, 80, 0.15); /* Slightly brighter dark blue for better visibility */
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 0, 98, 1); /* Adjusted border color */
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            padding: 15px;
            margin-bottom: 10px;
            position: relative;
            z-index: 1;
        }
        .nk-forum-topic .question-card:hover,
        .nk-forum-topic .comment-card:hover {
            background: rgba(30, 50, 100, 0.2); /* Lighter dark blue on hover */
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
        }
        @supports not (backdrop-filter: blur(10px)) {
            .nk-forum-topic .question-card,
            .nk-forum-topic .comment-card {
                background: rgba(20, 40, 80, 0.9); /* Adjusted fallback */
            }
            .nk-forum-topic .question-card:hover,
            .nk-forum-topic .comment-card:hover {
                background: rgba(30, 50, 100, 0.9);
            }
        }
        .nk-forum-topic .comment-card.low-quality-comment {
            background: rgba(15, 30, 70, 0.15); /* Adjusted for low-quality */
            border: 1px solid rgb(0, 140, 255);
        }
        @supports not (backdrop-filter: blur(10px)) {
            .nk-forum-topic .comment-card.low-quality-comment {
                background: rgba(15, 30, 70, 0.9);
            }
        }
        .nk-forum-topic .question-card .nk-forum-topic-author-name a,
        .nk-forum-topic .question-card .nk-forum-topic-author-role,
        .nk-forum-topic .question-card .nk-forum-topic-author-since,
        .nk-forum-topic .question-card .nk-forum-topic-content h3,
        .nk-forum-topic .question-card .nk-forum-topic-content p,
        .nk-forum-topic .question-card .nk-forum-topic-date,
        .nk-forum-topic .question-card .nk-forum-action-btn a,
        .nk-forum-topic .question-card .nk-forum-action-btn button.nk-anchor,
        .nk-forum-topic .comment-card .nk-forum-topic-author-name a,
        .nk-forum-topic .comment-card .nk-forum-topic-author-role,
        .nk-forum-topic .comment-card .nk-forum-topic-author-since,
        .nk-forum-topic .comment-card .nk-forum-topic-content p,
        .nk-forum-topic .comment-card .nk-forum-topic-date,
        .nk-forum-topic .comment-card .nk-forum-action-btn a,
        .nk-forum-topic .comment-card .nk-forum-action-btn button.nk-anchor {
            color: #ffffff;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
        }
        .nk-forum-topic .question-card .nk-forum-vote-section .vote-count,
        .nk-forum-topic .comment-card .nk-forum-vote-section .vote-count {
            color: #ffffff;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
        }
        .nk-forum-topic .question-card::before,
        .nk-forum-topic .comment-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, rgba(20, 40, 80, 0.1) 0%, rgba(20, 40, 80, 0) 50%); 
            border-radius: 15px;
            pointer-events: none;
            z-index: -1;
        }
        .nk-forum-topic .reply-card {
            padding: 12px;
            border-radius: 12px;
        }

        .nk-forum-topic .question-card .nk-forum-topic-attachments {
            background: rgba(21, 31, 53, 0.15) !important; 
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(3, 16, 54, 0.2);
            border-radius: 10px;
            padding: 10px;
            margin-top: 15px;
        }
        @supports not (backdrop-filter: blur(10px)) {
            .nk-forum-topic .question-card .nk-forum-topic-attachments {
                background: rgba(2, 11, 27, 0.9) !important;
            }
        }
        .nk-forum-topic .question-card .nk-forum-topic-attachments h4 {
            color: #ffffff;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
            margin-bottom: 10px;
            font-size: 1rem;
        }
        .nk-forum-topic .question-card .nk-forum-topic-attachments img,
        .nk-forum-topic .question-card .nk-forum-topic-attachments video {
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }

        .report-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(35, 41, 48, 0.95);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            z-index: 2000;
            width: 400px;
            max-width: 90%;
        }
        .report-modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1999;
        }
        .report-modal form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        .report-modal select,
        .report-modal textarea {
            background: rgba(41, 49, 57, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: #d1d5db;
            padding: 8px;
            border-radius: 5px;
            font-family: 'Montserrat', sans-serif;
        }
        .report-modal select:focus,
        .report-modal textarea:focus {
            outline: none;
            border-color: #0585e6;
            box-shadow: 0 0 5px rgba(5, 133, 230, 0.5);
        }
        .report-modal button {
            padding: 8px 16px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            transition: transform 0.2s ease;
            font-family: 'Montserrat', sans-serif;
        }
        .report-modal button:hover {
            transform: scale(1.05);
        }
        .report-modal .submit-btn {
            background: #0585e6;
            color: #fff;
        }
        .report-modal .cancel-btn {
            background: #404854;
            color: #fff;
        }
        .report-modal h3 {
            color: #fff;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .nk-pagination .disabled {
            pointer-events: none;
            opacity: 0.5;
        }
        .nk-pagination-center {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }
        .nk-pagination nav a {
            margin: 0 5px;
            padding: 5px 10px;
            text-decoration: none;
            color: #ffffff;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 100px;
            transition: background 0.3s ease;
        }
        .nk-pagination nav a:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        .nk-pagination-current {
            background-color: #fe0369 !important;
            color: white !important;
        }

        .nk-forum.nk-forum-topic {
            background: rgba(10, 31, 40, 0.5) !important; 
            backdrop-filter: blur(8px); 
            -webkit-backdrop-filter: blur(8px);
            border-radius: 15px; 
            padding: 15px; 
            border: 1px solid rgba(100, 30, 57, 0.2); 
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2); 
        }

        @supports not (backdrop-filter: blur(8px)) {
            .nk-forum.nk-forum-topic {
                background: rgba(10, 20, 40, 0.8); 
            }
        }

        .modal.fade {
            z-index: 1055 !important;
        }

        .modal-backdrop {
            z-index: 1050 !important;
            background: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background: rgba(35, 41, 48, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            color: #d1d5db;
        }

        .modal-header {
            border-bottom: none;
            padding: 15px 20px;
        }

        .modal-title {
            color: #fff;
            font-size: 1.1rem;
            font-weight: 700;
            text-transform: uppercase;
        }

        .btn-close {
            filter: invert(1);
        }

        .modal-body {
            padding: 20px;
            color: #d1d5db;
        }

        .modal-body strong {
            color: #fff;
        }

        .modal-footer {
            border-top: none;
            padding: 10px 20px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .cancel-btn {
            background-color: #404854;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 8px 16px;
            text-transform: uppercase;
            transition: transform 0.2s ease;
        }

        .cancel-btn:hover {
            transform: scale(1.05);
        }

        .submit-btn {
            background-color: #fe0369;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 8px 16px;
            text-transform: uppercase;
            transition: transform 0.2s ease;
        }

        .submit-btn:hover {
            transform: scale(1.05);
            background-color: #b40148;
        }

        .note-editor .note-toolbar {
            background: rgba(50, 60, 80, 0.95) !important; 
            border-bottom: 2px solid #fe0369 !important; 
            padding: 8px !important; 
            border-radius: 5px 5px 0 0 !important; 
        }

        .note-editor .note-toolbar .note-btn-group .note-btn {
            background: rgba(70, 80, 100, 0.8) !important; 
            color: #ffffff !important; 
            border: 1px solid rgba(255, 255, 255, 0.2) !important; 
            margin: 2px !important; 
            transition: background 0.3s ease, transform 0.2s ease !important;
        }

        .note-editor .note-toolbar .note-btn-group .note-btn:hover {
            background: #fe0369 !important; 
            color: #ffffff !important;
            transform: scale(1.05) !important; 
        }

        .note-editor .note-toolbar .note-btn-group .note-btn.active {
            background: #0585e6 !important; 
            color: #ffffff !important;
        }

        .note-editor .note-toolbar .note-dropdown-menu {
            background: rgba(35, 41, 48, 0.95) !important; 
            border: 1px solid rgba(255, 255, 255, 0.2) !important;
            color: #d1d5db !important;
        }

        .note-editor .note-toolbar .note-dropdown-menu a {
            color: #d1d5db !important;
        }

        .note-editor .note-toolbar .note-dropdown-menu a:hover {
            background: #fe0369 !important;
            color: #ffffff !important;
        }

        .note-editor .note-editable {
            background: rgba(20, 40, 80, 0.5) !important; 
            color: #ffffff !important;
            border: 1px solid rgba(255, 0, 98, 0.5) !important;
            border-radius: 0 0 5px 5px !important;
        }

        .cancel-reply {
            background: #404854 !important; 
            color: #ffffff !important;
            border: 1px solid #fe0369 !important; 
            border-radius: 5px !important;
            padding: 8px 16px !important;
            text-transform: uppercase !important;
            transition: background 0.3s ease, transform 0.2s ease !important;
        }

        .cancel-reply:hover {
            background: #fe0369 !important; 
            color: #ffffff !important;
            transform: scale(1.05) !important; 
        }

        .cancel-update {
            background: #404854 !important; 
            color: #ffffff !important;
            border: 1px solid #fe0369 !important; 
            border-radius: 5px !important;
            padding: 8px 16px !important;
            text-transform: uppercase !important;
            transition: background 0.3s ease, transform 0.2s ease !important;
        }

        .cancel-update:hover {
            background: #fe0369 !important; 
            color: #ffffff !important;
            transform: scale(1.05) !important; 
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {% set contenu_field = form_widget(comment_form.contenu, {'attr': {'class': 'nk-summernote form-control'}}) %}
    {% set form_rest = form_rest(comment_form) %}

    <script>
        $(document).ready(function() {
            let sentimentMap = {
                positive: [],
                negative: [],
                neutral: []
            };

            function debounce(func, wait) {
                let timeout;
                return function(...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            function loadEmojis() {
                return $.ajax({
                    url: 'https://emoji-api.com/emojis?access_key=22b221fd734cfd73f62238bc32fa072f636bc63b',
                    method: 'GET',
                    cache: true
                }).then(emojis => {
                    const positiveGroups = ['smileys-emotion', 'people-body', 'activities', 'food-drink'];
                    const neutralGroups = ['travel-places', 'objects', 'animals-nature'];

                    emojis.forEach(emoji => {
                        const group = emoji.group;
                        const name = emoji.slug.toLowerCase();

                        if (positiveGroups.includes(group) || name.includes('smile') || name.includes('happy') || name.includes('love') || name.includes('laugh') || name.includes('party') || name.includes('cool')) {
                            if (sentimentMap.positive.length < 20) sentimentMap.positive.push(emoji.character);
                        }
                        else if (group === 'smileys-emotion' && (name.includes('sad') || name.includes('cry') || name.includes('angry') || name.includes('mad') || name.includes('frown') || name.includes('disappoint') || name.includes('frustrated') || name.includes('broken') || name.includes('rage') || name.includes('pout'))) {
                            if (sentimentMap.neutral.length < 20) sentimentMap.neutral.push(emoji.character);
                        }
                        else if (neutralGroups.includes(group) || name.includes('think') || name.includes('shrug') || name.includes('face') || name.includes('neutral') || name.includes('roll')) {
                            if (sentimentMap.neutral.length < 20) sentimentMap.neutral.push(emoji.character);
                        }
                    });

                    if (sentimentMap.positive.length < 10) sentimentMap.positive = ['👍', '😊', '😂', '❤️', '🎉', '😍', '👏', '🌟', '😎', '💪'];
                    if (sentimentMap.negative.length < 10) sentimentMap.negative = ['👎', '😢', '😡', '💔', '😤', '😞', '🤬', '😣', '💢', '😠'];
                    if (sentimentMap.neutral.length < 10) sentimentMap.neutral = ['🤔', '😐', '🙂', '👀', '🤷', '😶', '🤝', '🙄', '😴', '🤓'];

                    $.ajax({
                        url: '{{ path('api_update_sentiment_map') }}',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ sentimentMap: sentimentMap }),
                        success: function(response) {
                            if (!response.success) console.error('Failed to sync sentiment map:', response.message);
                        },
                        error: function() {
                            console.error('Failed to sync sentiment map with backend');
                        }
                    });
                }).catch(() => {
                    sentimentMap = {
                        positive: ['👍', '😊', '😂', '❤️', '🎉', '😍', '👏', '🌟', '😎', '💪'],
                        negative: ['👎', '😢', '😡', '💔', '😤', '😞', '🤬', '😣', '💢', '😠'],
                        neutral: ['🤔', '😐', '🙂', '👀', '🤷', '😶', '🤝', '🙄', '😴', '🤓']
                    };
                });
            }

            function fetchReactions(id, type, $display) {
                $.ajax({
                    url: '{{ path('react_action') }}',
                    method: 'POST',
                    data: { id: id, type: type, action: 'fetch' },
                    success: function(response) {
                        if (response.success) {
                            updateReactionDisplay($display, response.reactionCounts || {});
                        } else {
                            console.error('Failed to fetch reactions:', response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAX error fetching reactions:', status, error);
                    }
                });
            }

            function updateReactionDisplay($display, reactionCounts) {
                let reactionHtml = '';
                for (const [emoji, count] of Object.entries(reactionCounts)) {
                    reactionHtml += `<span class="reaction-item" data-emoji="${emoji}">${emoji} ${count}</span>`;
                }
                $display.html(reactionHtml);
            }

            function initializeReactions() {
                $('.reaction-display').each(function() {
                    const $display = $(this);
                    const id = $display.data('id');
                    const type = $display.data('type');
                    if ($display.children().length === 0) {
                        fetchReactions(id, type, $display);
                    }
                });
            }

            const showEmojiPicker = debounce(function($icon, id, type) {
                if (sentimentMap.positive.length === 0) return;

                $('.emoji-picker-container').remove();

                let pickerHtml = '<div class="emoji-picker-container">';
                
                pickerHtml += '<div class="emoji-section"><h4>Positive</h4><div class="emoji-grid">';
                sentimentMap.positive.forEach(emoji => {
                    pickerHtml += `<span class="emoji-option" data-emoji="${emoji}" data-id="${id}" data-type="${type}">${emoji}</span>`;
                });
                pickerHtml += '</div></div>';

                pickerHtml += '<div class="emoji-section"><h4>Negative</h4><div class="emoji-grid">';
                sentimentMap.negative.forEach(emoji => {
                    pickerHtml += `<span class="emoji-option" data-emoji="${emoji}" data-id="${id}" data-type="${type}">${emoji}</span>`;
                });
                pickerHtml += '</div></div>';

                pickerHtml += '<div class="emoji-section"><h4>Neutral</h4><div class="emoji-grid">';
                sentimentMap.neutral.forEach(emoji => {
                    pickerHtml += `<span class="emoji-option" data-emoji="${emoji}" data-id="${id}" data-type="${type}">${emoji}</span>`;
                });
                pickerHtml += '</div></div>';

                pickerHtml += '</div>';

                $('body').append(pickerHtml);
                const $newPicker = $('.emoji-picker-container');

                const iconOffset = $icon.offset();
                const iconHeight = $icon.outerHeight();
                const viewportHeight = $(window).height();
                const pickerHeight = $newPicker.outerHeight();
                let topPosition = iconOffset.top + iconHeight;
                if (topPosition + pickerHeight > viewportHeight) {
                    topPosition = iconOffset.top - pickerHeight;
                }
                $newPicker.css({
                    top: topPosition,
                    left: iconOffset.left
                }).fadeIn(100);

                $newPicker.data('reaction-wrapper', $icon.closest('.reaction-wrapper'));
            }, 200);

            function fetchUserVotes() {
                const topicIds = [];
                $('.question-card').each(function() {
                    const topicId = $(this).data('id');
                    if (topicId) topicIds.push(topicId);
                });

                if (topicIds.length === 0) return;

                $.ajax({
                    url: '{{ path('ajax_fetch_user_votes') }}',
                    method: 'POST',
                    data: { topicIds: topicIds },
                    success: function(response) {
                        if (response.success) {
                            response.votes.forEach(vote => {
                                const $card = $(`.question-card[data-id="${vote.topicId}"]`);
                                const $upvoteBtn = $card.find('.upvote-btn');
                                const $downvoteBtn = $card.find('.downvote-btn');

                                if (vote.voteType === 'UP') {
                                    $upvoteBtn.addClass('voted');
                                } else if (vote.voteType === 'DOWN') {
                                    $downvoteBtn.addClass('voted');
                                }
                            });
                        } else {
                            console.error('Failed to fetch user votes:', response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAX error fetching user votes:', status, error);
                    }
                });
            }

            function fetchUserCommentVotes() {
                const commentIds = [];
                $('.comment-card').each(function() {
                    const commentId = $(this).data('id');
                    if (commentId) commentIds.push(commentId);
                });

                if (commentIds.length === 0) return;

                $.ajax({
                    url: '{{ path('ajax_fetch_user_comment_votes') }}',
                    method: 'POST',
                    data: { commentIds: commentIds },
                    success: function(response) {
                        if (response.success) {
                            response.votes.forEach(vote => {
                                const $card = $(`.comment-card[data-id="${vote.commentId}"]`);
                                const $upvoteBtn = $card.find('.upvote-btn');
                                const $downvoteBtn = $card.find('.downvote-btn');

                                if (vote.voteType === 'UP') {
                                    $upvoteBtn.addClass('voted');
                                } else if (vote.voteType === 'DOWN') {
                                    $downvoteBtn.addClass('voted');
                                }
                            });
                        } else {
                            console.error('Failed to fetch user comment votes:', response.message);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('AJAX error fetching user comment votes:', status, error);
                    }
                });
            }

            loadEmojis().then(() => {
                initializeReactions();

                $(document).on('mouseenter', '.reaction-icon', function() {
                    const $icon = $(this);
                    const id = $icon.data('id');
                    const type = $icon.data('type');
                    showEmojiPicker($icon, id, type);
                });

                $(document).on('mouseenter', '.emoji-picker-container', function() {
                    $(this).stop().fadeIn(100);
                });

                $(document).on('mouseleave', '.reaction-wrapper', function(e) {
                    const $wrapper = $(this);
                    const $picker = $('.emoji-picker-container');
                    const relatedTarget = $(e.relatedTarget);

                    if ($picker.length && (relatedTarget.is($picker) || relatedTarget.closest('.emoji-picker-container').length)) {
                        return;
                    }

                    if ($picker.data('reaction-wrapper')?.is($wrapper)) {
                        $picker.fadeOut(100, function() {
                            $(this).remove();
                        });
                    }
                });

                $(document).on('mouseleave', '.emoji-picker-container', function(e) {
                    const $picker = $(this);
                    const $wrapper = $picker.data('reaction-wrapper');
                    const relatedTarget = $(e.relatedTarget);

                    if ($wrapper && (relatedTarget.is($wrapper) || relatedTarget.closest('.reaction-wrapper').length)) {
                        return;
                    }

                    $picker.fadeOut(100, function() {
                        $(this).remove();
                    });
                });

                $(document).on('click', '.emoji-option', function() {
                    const $emoji = $(this);
                    const emoji = $emoji.data('emoji');
                    const id = $emoji.data('id');
                    const type = $emoji.data('type');
                    const $display = $(`.reaction-display[data-id="${id}"]`);
                    const $picker = $('.emoji-picker-container');

                    $.ajax({
                        url: '{{ path('react_action') }}',
                        method: 'POST',
                        data: { id: id, type: type, emoji: emoji, action: 'react' },
                        success: function(response) {
                            if (response.success) {
                                updateReactionDisplay($display, response.reactionCounts);
                                $picker.fadeOut(100, function() {
                                    $(this).remove();
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error',
                                    text: response.message,
                                    icon: 'error',
                                    background: '#1c2526',
                                    color: '#d1d5db',
                                    confirmButtonColor: '#ff6f61'
                                });
                            }
                        },
                        error: function() {
                            Swal.fire({
                                title: 'Error',
                                text: 'Failed to save reaction',
                                icon: 'error',
                                background: '#1c2526',
                                color: '#d1d5db',
                                confirmButtonColor: '#ff6f61'
                            });
                        }
                    });
                });
            });

            $(document).on('click', '.toggle-replies-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('id');
                const $childComments = $(`.child-comments[data-parent-id="${commentId}"]`);
                const $btnText = $btn.find('a');

                $childComments.slideToggle(300, function() {
                    if ($childComments.is(':visible')) {
                        $btnText.html('<span class="fa fa-eye-slash"></span> Hide Replies (' + $childComments.find('li').length + ')');
                    } else {
                        $btnText.html('<span class="fa fa-eye"></span> Show Replies (' + $childComments.find('li').length + ')');
                    }
                });
            });

            $(document).on('click', '.reply-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const parentId = $btn.data('id');
                const type = $btn.data('type');
                const $card = $btn.closest('li');
                const $replyContainer = $card.find('.reply-form-container').first();

                $('.reply-form-container').hide();
                $('.update-form-container').hide();

                if ($replyContainer.is(':visible')) {
                    $replyContainer.hide();
                    return;
                }

                let replyFormHtml = `
                    <div class="nk-gap-1"></div>
                    <form action="{{ path('comment_create', {'id': question.id}) }}" method="POST" class="profanity-check-form">
                        <div class="mb-3">
                            {{ contenu_field|raw }}
                            {{ form_rest|raw }}
                        </div>
                        <input type="hidden" name="type" value="${type}">
                        <input type="hidden" name="parent_id" value="${parentId}">
                        <button type="submit" class="nk-btn nk-btn-rounded nk-btn-color-white">Repondre</button>
                        <button type="button" class="nk-btn nk-btn-rounded nk-btn-color-dark cancel-reply">Cancel</button>
                    </form>
                `;

                $replyContainer.html(replyFormHtml).show();
                $replyContainer.find('.nk-summernote').summernote({
                    height: 200,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['font', ['fontsize']],
                        ['para', ['ul', 'ol', 'paragraph']],
                        ['misc', ['codeview']]
                    ],
                    fontSizes: ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '28', '30', '36', '48', '64'],
                    placeholder: 'Write your reply here...'
                });
            });

            $(document).on('click', '.cancel-reply', function() {
                $(this).closest('.reply-form-container').hide();
            });

            $(document).on('click', '.update-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('id');
                const $card = $btn.closest('li');
                const $updateContainer = $card.find('.update-form-container').first();
                
                let currentContent = $card.find('.nk-forum-topic-content p').clone();
                currentContent.find('.mention').remove();
                currentContent = currentContent.text().trim();

                $('.reply-form-container').hide();
                $('.update-form-container').hide();

                if ($updateContainer.is(':visible')) {
                    $updateContainer.hide();
                    return;
                }

                let updateFormHtml = `
                    <div class="nk-gap-1"></div>
                    <form action="{{ path('comment_update', {'id': 'COMMENT_ID'}) }}" method="POST" class="profanity-check-form">
                        <div class="mb-3">
                            {{ contenu_field|raw }}
                            {{ form_rest|raw }}
                        </div>
                        <button type="submit" class="nk-btn nk-btn-rounded nk-btn-color-white">Modifier</button>
                        <button type="button" class="nk-btn nk-btn-rounded nk-btn-color-dark cancel-update">Cancel</button>
                    </form>
                `;

                const finalFormHtml = updateFormHtml.replace('COMMENT_ID', commentId);
                $updateContainer.html(finalFormHtml).show();

                const $summernote = $updateContainer.find('.nk-summernote');
                $summernote.summernote({
                    height: 200,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['font', ['fontsize']],
                        ['para', ['ul', 'ol', 'paragraph']],
                        ['misc', ['codeview']]
                    ],
                    fontSizes: ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '28', '30', '36', '48', '64'],
                    placeholder: 'Update your comment here...'
                });

                $summernote.summernote('code', currentContent);
            });

            $(document).on('click', '.cancel-update', function() {
                $(this).closest('.update-form-container').hide();
            });

            $(document).on('click', '.vote-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const id = $btn.data('id');
                const type = $btn.data('type');
                const voteType = $btn.data('vote-type');
                const $voteSection = $btn.closest('.nk-forum-vote-section');
                const $voteCount = $voteSection.find('.vote-count');
                const $otherBtn = $voteSection.find(`.vote-btn[data-vote-type="${voteType === 'UP' ? 'DOWN' : 'UP'}"]`);

                const voteUrl = type === 'question' ? '{{ path('ajax_vote_action') }}' : '{{ path('ajax_vote_comment_action') }}';

                $.ajax({
                    url: voteUrl,
                    method: 'POST',
                    data: { id: id, type: type, vote_type: voteType },
                    success: function(response) {
                        if (response.success) {
                            $voteCount.text(response.votes);

                            if (response.hasUpvoted) {
                                $voteSection.find('.upvote-btn').addClass('voted');
                                $voteSection.find('.downvote-btn').removeClass('voted');
                            } else if (response.hasDownvoted) {
                                $voteSection.find('.downvote-btn').addClass('voted');
                                $voteSection.find('.upvote-btn').removeClass('voted');
                            } else {
                                $voteSection.find('.upvote-btn').removeClass('voted');
                                $voteSection.find('.downvote-btn').removeClass('voted');
                            }
                        } else {
                            Swal.fire({
                                title: 'Voting Error',
                                text: response.message,
                                icon: 'error',
                                background: '#1c2526',
                                color: '#d1d5db',
                                confirmButtonColor: '#fe0369'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Voting Error',
                            text: 'An error occurred while voting. Please try again.',
                            icon: 'error',
                            background: '#1c2526',
                            color: '#d1d5db',
                            confirmButtonColor: '#fe0369'
                        });
                    }
                });
            });

            $(document).on('submit', '.profanity-check-form', function(e) {
                e.preventDefault();
                const $form = $(this);
                const content = $form.find('.nk-summernote').summernote('code');
                const $submitButton = $form.find('button[type="submit"]');
                $submitButton.prop('disabled', true);

                $.ajax({
                    url: '{{ path('api_check_profanity') }}',
                    method: 'POST',
                    data: { content: content },
                    success: function(response) {
                        if (response.isProfane) {
                            const profanityList = response.details ? response.details.map(m => m['text']).join(', ') : '';
                            Swal.fire({
                                title: 'Inappropriate Content Detected',
                                html: 'Your comment contains inappropriate language. Please revise it.<br><strong>Detected:</strong> ' + (profanityList || 'N/A'),
                                icon: 'warning',
                                background: '#1c2526',
                                color: '#d1d5db',
                                confirmButtonColor: '#fe0369'
                            }).then(() => {
                                $submitButton.prop('disabled', false);
                            });
                        } else {
                            $form.off('submit');
                            $form[0].submit();
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Error',
                            text: 'Error checking profanity. Please try again.',
                            icon: 'error',
                            background: '#1c2526',
                            color: '#d1d5db',
                            confirmButtonColor: '#fe0369'
                        }).then(() => {
                            $submitButton.prop('disabled', false);
                        });
                    }
                });
            });

            $(document).on('click', '.spam-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const id = $btn.data('id');
                const type = $btn.data('type');
                const userId = $btn.data('user-id');

                if (!userId || isNaN(userId) || parseInt(userId) <= 0) {
                    Swal.fire({
                        title: 'Error',
                        text: 'Invalid user ID for reporting.',
                        icon: 'error',
                        background: '#1c2526',
                        color: '#d1d5db',
                        confirmButtonColor: '#ff6f61'
                    });
                    return;
                }

                let contentToReport = '';
                if (type === 'question') {
                    contentToReport = $('.question-card[data-id="' + id + '"] .nk-forum-topic-content p').text().trim();
                } else if (type === 'comment') {
                    contentToReport = $('.comment-card[data-id="' + id + '"] .nk-forum-topic-content p').text().trim();
                }

                const modalHtml = `
                    <div class="report-modal-backdrop"></div>
                    <div class="report-modal">
                        <h3>Signaler</h3>
                        <form id="report-form-${id}">
                            <input type="hidden" name="reporterId" value="{{ app.user ? app.user.id : '' }}">
                            <input type="hidden" name="reportedUserId" value="${userId}">
                            <input type="hidden" name="status" value="PENDING">
                            <select name="reason" required>
                                <option value="">Sélectionnez une raison</option>
                                <option value="MINEUR_IMPLIQUE">Minor Involved</option>
                                <option value="HARCELEMENT">Harassment</option>
                                <option value="SUICIDE_AUTOMUTILATION">Suicide/Self-Harm</option>
                                <option value="CONTENU_VIOLENT">Violent Content</option>
                                <option value="VENTE_ARTICLES_RESTREINTS">Restricted Items Sale</option>
                                <option value="CONTENU_ADULTE">Adult Content</option>
                                <option value="ARNAQUE_FAUSSE_INFORMATION">Scam/False Information</option>
                                <option value="CONTENU_NON_DESIRE">Unwanted Content</option>
                            </select>
                            <textarea name="preuve" placeholder="Additional details (optional)" rows="4">${contentToReport}</textarea>
                            <div style="display: flex; gap: 10px;">
                                <button type="submit" class="submit-btn">OK</button>
                                <button type="button" class="cancel-btn">Cancel</button>
                            </div>
                        </form>
                    </div>
                `;

                $('.report-modal, .report-modal-backdrop').remove();
                $('body').append(modalHtml);

                $(`#report-form-${id}`).on('submit', function(e) {
                    e.preventDefault();
                    const formData = $(this).serializeArray();
                    const data = {};
                    formData.forEach(item => data[item.name] = item.value);

                    $.ajax({
                        url: '{{ path('report_create') }}',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(data),
                        success: function(response) {
                            if (response.success) {
                                Swal.fire({
                                    title: 'Success',
                                    text: 'Report submitted successfully',
                                    icon: 'success',
                                    background: '#1c2526',
                                    color: '#d1d5db',
                                    confirmButtonColor: '#0585e6'
                                });
                                $('.report-modal, .report-modal-backdrop').remove();
                            } else {
                                Swal.fire({
                                    title: 'Error',
                                    text: response.message || 'Failed to submit report',
                                    icon: 'error',
                                    background: '#1c2526',
                                    color: '#d1d5db',
                                    confirmButtonColor: '#ff6f61'
                                });
                            }
                        },
                        error: function(xhr, status, error) {
                            Swal.fire({
                                title: 'Error',
                                text: 'Failed to submit report: ' + (xhr.responseJSON?.message || 'Server error'),
                                icon: 'error',
                                background: '#1c2526',
                                color: '#d1d5db',
                                confirmButtonColor: '#ff6f61'
                            });
                        }
                    });
                });

                $('.cancel-btn, .report-modal-backdrop').on('click', function() {
                    $('.report-modal, .report-modal-backdrop').remove();
                });
            });

            $(document).on('click', '.delete-comment-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('comment-id');
                const commentContent = $btn.data('comment-content');
                const deleteUrl = $btn.data('delete-url');
                const csrfToken = $btn.data('csrf-token');

                Swal.fire({
                    title: 'SUPPRIMER LE SUJET',
                    html: `Êtes-vous sûr de vouloir supprimer le sujet ? "<strong>${commentContent}</strong>"? Cette action ne peut pas être annulée.`,
                    showCancelButton: true,
                    confirmButtonText: 'Supprimer',
                    cancelButtonText: 'Cancel',
                    background: 'rgba(35, 41, 48, 0.95)',
                    color: '#d1d5db',
                    confirmButtonColor: '#fe0369',
                    cancelButtonColor: '#404854',
                    customClass: {
                        popup: 'nk-gaming-swal',
                        title: 'nk-gaming-swal-title',
                        content: 'nk-gaming-swal-content',
                        confirmButton: 'swal2-confirm',
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: deleteUrl,
                            method: 'POST',
                            data: {
                                _token: csrfToken
                            },
                            success: function(response) {
                                $(`li[data-id="${commentId}"]`).remove();
                                Swal.fire({
                                    title: 'Succès',
                                    text: 'Commentaire supprimé avec succès !',
                                    icon: 'success',
                                    background: '#1c2526',
                                    color: '#d1d5db',
                                    confirmButtonColor: '#fe0369'
                                });
                            },
                            error: function(xhr, status, error) {
                                console.error('Deletion error:', status, error);
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Failed to delete the comment. Please try again.',
                                    imageUrl: '{{ asset('images/one-piece-luffy.gif') }}',
                                    imageWidth: 100,
                                    imageHeight: 100,
                                    background: '#1c2526',
                                    color: '#d1d5db',
                                    confirmButtonColor: '#fe0369'
                                });
                            }
                        });
                    }
                });
            });

            fetchUserVotes();
            fetchUserCommentVotes();
        });
    </script>
{% endblock %}