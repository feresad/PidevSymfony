{% extends 'base.html.twig' %}

{% block title %}Level OP | {{ question.title }}{% endblock %}

{% block body %}
    <!-- START: Breadcrumbs -->
    <div class="nk-gap-1"></div>
    <div class="container">
        <ul class="nk-breadcrumbs">
            <li><a href="{{ path('app_home') }}">Home</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><a href="{{ path('forum_index') }}">Forum</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><a href="{{ path('forum_topics') }}">Main Game Discussions</a></li>
            <li><span class="fa fa-angle-right"></span></li>
            <li><span>{{ question.title }}</span></li>
        </ul>
    </div>
    <div class="nk-gap-1"></div>
    <!-- END: Breadcrumbs -->

    <div class="container">
        <div class="nk-gap-2"></div>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}

        <ul class="nk-forum nk-forum-topic" id="forum-topic-list">
            <li data-id="{{ question.id }}" class="question-card">
                <div class="nk-forum-topic-author">
                    <a href="#">
                        <img src="{{ question.utilisateurId.getPhoto() ? 'http://localhost/img/games/' ~ question.utilisateurId.getPhoto() : asset('assets/images/avatar-1.jpg') }}" alt="{{ question.utilisateurId.getNickname() }}">
                    </a>
                    <div class="nk-forum-topic-author-name" title="{{ question.utilisateurId.getNickname() }}">
                        <a href="#">{{ question.utilisateurId.getNickname() }}</a>
                    </div>
                    <div class="nk-forum-topic-author-role">{{ question.utilisateurId.getPrivilege() }}</div>
                    <div class="nk-forum-topic-author-since">
                        Member since {{ question.utilisateurId.getId() ? question.utilisateurId.getId()|date('F d, Y') : 'Unknown' }}
                    </div>
                </div>
                <div class="nk-forum-topic-content">
                    <h3>{{ question.title }}</h3>
                    <p>{{ question.content }}</p>
                    {% if question.image %}
                        <div class="nk-forum-topic-attachments">
                            <h4 class="h5">Attachment</h4>
                            <img src="http://localhost/img/games/{{ question.image }}" alt="Topic Media" style="max-width: 300px;">
                        </div>
                    {% endif %}
                    {% if question.video %}
                        <div class="nk-forum-topic-attachments">
                            <h4 class="h5">Attachment</h4>
                            <video width="640" height="480" controls>
                                <source src="http://localhost/img/games/{{ question.video }}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        </div>
                    {% endif %}
                </div>
                <div class="nk-forum-topic-footer">
                    <div class="nk-forum-topic-footer-left">
                        <span class="nk-forum-topic-date">{{ question.createdAt|date('F d, Y') }}</span>
                    </div>
                    <div class="nk-forum-vote-section">
                        <button class="vote-btn upvote-btn voting-button upvote" data-id="{{ question.id }}" data-type="question" data-vote-type="UP" data-fallback="↑">
                            <img src="{{ asset('images/upvote-emoji.png') }}" alt="Upvote" class="vote-icon">
                        </button>
                        <span class="vote-count">{{ question.votes|default(0) }}</span>
                        <button class="vote-btn downvote-btn voting-button downvote" data-id="{{ question.id }}" data-type="question" data-vote-type="DOWN" data-fallback="↓">
                            <img src="{{ asset('images/downvote-emoji.png') }}" alt="Downvote" class="vote-icon">
                        </button>
                    </div>
                    <div class="nk-forum-topic-footer-right">
                        {% if question.gameImage %}
                            <div class="nk-forum-game-image">
                                <img src="http://localhost/img/games/{{ question.gameImage }}" alt="Game Image" style="max-width: 50px; margin-right: 10px;">
                            </div>
                        {% else %}
                            <div class="nk-forum-game-image">
                                <img src="{{ asset('assets/images/default-game.jpg') }}" alt="Default Game Image" style="max-width: 50px; margin-right: 10px;">
                            </div>
                        {% endif %}
                        <span class="nk-forum-action-btn reply-btn" data-id="{{ question.id }}" data-type="question">
                            <a href="#" class="nk-anchor"><span class="fa fa-reply"></span> Reply</a>
                        </span>
                        <span class="nk-forum-action-btn">
                            <a href="#"><span class="fa fa-flag"></span> Spam</a>
                        </span>
                    </div>
                </div>
                <div class="reply-form-container" style="display: none;"></div>
            </li>

            {% macro render_comments(comments, level = 0, is_reply = false) %}
                {% for comment in comments %}
                    <li data-id="{{ comment.id }}" class="comment-card {{ is_reply ? 'reply-card' : '' }}" style="margin-left: {{ level * 20 }}px;">
                        <div class="nk-forum-topic-author">
                            <a href="#">
                                <img src="{{ comment.utilisateurId.getPhoto() ? 'http://localhost/img/games/' ~ comment.utilisateurId.getPhoto() : asset('assets/images/avatar-2.jpg') }}" alt="{{ comment.utilisateurId.getNickname() }}">
                            </a>
                            <div class="nk-forum-topic-author-name" title="{{ comment.utilisateurId.getNickname() }}">
                                <a href="#">{{ comment.utilisateurId.getNickname() }}</a>
                            </div>
                            <div class="nk-forum-topic-author-role">{{ comment.utilisateurId.getPrivilege() }}</div>
                            <div class="nk-forum-topic-author-since">
                                Member since {{ comment.utilisateurId.getId() ? comment.utilisateurId.getId()|date('F d, Y') : 'Unknown' }}
                            </div>
                        </div>
                        <div class="nk-forum-topic-content">
                            <p>{{ comment.content|raw }}</p>
                        </div>
                        <div class="nk-forum-topic-footer">
                            <span class="nk-forum-topic-date">{{ comment.createdAt|date('F d, Y') }}</span>
                            <div class="nk-forum-vote-section">
                                <button class="vote-btn upvote-btn voting-button upvote" data-id="{{ comment.id }}" data-type="comment" data-vote-type="UP" data-fallback="↑">
                                    <img src="{{ asset('images/upvote-emoji.png') }}" alt="Upvote" class="vote-icon">
                                </button>
                                <span class="vote-count">{{ comment.votes|default(0) }}</span>
                                <button class="vote-btn downvote-btn voting-button downvote" data-id="{{ comment.id }}" data-type="comment" data-vote-type="DOWN" data-fallback="↓">
                                    <img src="{{ asset('images/downvote-emoji.png') }}" alt="Downvote" class="vote-icon">
                                </button>
                            </div>
                            {% if comment.childCommentaires is defined and comment.childCommentaires is not empty %}
                                <span class="nk-forum-action-btn toggle-replies-btn" data-id="{{ comment.id }}">
                                    <a href="#" class="nk-anchor">
                                        <span class="fa fa-eye-slash"></span> Hide Replies ({{ comment.childCommentaires|length }})
                                    </a>
                                </span>
                            {% endif %}
                            <span class="nk-forum-action-btn reply-btn" data-id="{{ comment.id }}" data-type="comment">
                                <a href="#" class="nk-anchor"><span class="fa fa-reply"></span> Reply</a>
                            </span>
                            <span class="nk-forum-action-btn update-btn" data-id="{{ comment.id }}">
                                <a href="#" class="nk-anchor"><span class="fa fa-edit"></span> Update</a>
                            </span>
                            <span class="nk-forum-action-btn">
                                <form action="{{ path('comment_delete', {'id': comment.id}) }}" method="POST" style="display: inline;" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete_comment_' ~ comment.id) }}">
                                    <button type="submit" class="nk-anchor" style="background: none; border: none; padding: 0; color: inherit; cursor: pointer;">
                                        <span class="fa fa-trash"></span> Delete
                                    </button>
                                </form>
                            </span>
                            <span class="nk-forum-action-btn">
                                <a href="#"><span class="fa fa-flag"></span> Spam</a>
                            </span>
                        </div>
                        <div class="reply-form-container" style="display: none;"></div>
                        <div class="update-form-container" style="display: none;"></div>
                    </li>
                    {% if comment.childCommentaires is defined and comment.childCommentaires is not empty %}
                        <ul class="child-comments" data-parent-id="{{ comment.id }}" style="display: block;">
                            {{ _self.render_comments(comment.childCommentaires, level + 1, true) }}
                        </ul>
                    {% endif %}
                {% endfor %}
            {% endmacro %}

            {{ _self.render_comments(comments) }}
        </ul>

        <div class="nk-gap-2"></div>

        <div class="nk-pagination nk-pagination-left">
            <a href="#" class="nk-pagination-prev">
                <span class="ion-ios-arrow-back"></span>
            </a>
            <nav>
                <a class="nk-pagination-current" href="#">1</a>
                <a href="#">2</a>
                <a href="#">3</a>
                <a href="#">4</a>
                <span>...</span>
                <a href="#">14</a>
            </nav>
            <a href="#" class="nk-pagination-next">
                <span class="ion-ios-arrow-forward"></span>
            </a>
        </div>

        <div class="nk-gap-2"></div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/single_topic.css') }}">
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {% set contenu_field = form_widget(comment_form.contenu, {'attr': {'class': 'nk-summernote form-control'}}) %}
    {% set form_rest = form_rest(comment_form) %}

    <script>
        $(document).ready(function() {
            // Handle Show/Hide Replies Button Click with Animation
            $(document).on('click', '.toggle-replies-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('id');
                const $childComments = $(`.child-comments[data-parent-id="${commentId}"]`);
                const $btnText = $btn.find('a');

                $childComments.slideToggle(300, function() {
                    if ($childComments.is(':visible')) {
                        $btnText.html('<span class="fa fa-eye-slash"></span> Hide Replies (' + $childComments.find('li').length + ')');
                    } else {
                        $btnText.html('<span class="fa fa-eye"></span> Show Replies (' + $childComments.find('li').length + ')');
                    }
                });
            });

            // Handle Reply Button Click
            $(document).on('click', '.reply-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const parentId = $btn.data('id');
                const type = $btn.data('type');
                const $card = $btn.closest('li');
                const $replyContainer = $card.find('.reply-form-container').first();

                $('.reply-form-container').hide();
                $('.update-form-container').hide();

                if ($replyContainer.is(':visible')) {
                    $replyContainer.hide();
                    return;
                }

                let replyFormHtml = `
                    <div class="nk-gap-1"></div>
                    <form action="{{ path('comment_create', {'id': question.id}) }}" method="POST" class="profanity-check-form">
                        <div class="mb-3">
                            {{ contenu_field|raw }}
                            {{ form_rest|raw }}
                        </div>
                        <input type="hidden" name="type" value="${type}">
                        <input type="hidden" name="parent_id" value="${parentId}">
                        <button type="submit" class="nk-btn nk-btn-rounded nk-btn-color-white">Submit Reply</button>
                        <button type="button" class="nk-btn nk-btn-rounded nk-btn-color-dark cancel-reply">Cancel</button>
                    </form>
                `;

                $replyContainer.html(replyFormHtml).show();

                const $summernote = $replyContainer.find('.nk-summernote');
                $summernote.summernote({
                    height: 200,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['font', ['fontsize']],
                        ['para', ['ul', 'ol', 'paragraph']],
                        ['misc', ['codeview']]
                    ],
                    fontSizes: ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '28', '30', '36', '48', '64'],
                    placeholder: 'Write your reply here...'
                });

                $summernote.summernote('code', '');
            });

            // Handle Cancel Reply
            $(document).on('click', '.cancel-reply', function() {
                $(this).closest('.reply-form-container').hide();
            });

            // Handle Update Button Click
            $(document).on('click', '.update-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const commentId = $btn.data('id');
                const $card = $btn.closest('li');
                const $updateContainer = $card.find('.update-form-container').first();
                const currentContent = $card.find('.nk-forum-topic-content p').html();

                $('.reply-form-container').hide();
                $('.update-form-container').hide();

                if ($updateContainer.is(':visible')) {
                    $updateContainer.hide();
                    return;
                }

                let updateFormHtml = `
                    <div class="nk-gap-1"></div>
                    <form action="{{ path('comment_update', {'id': 'COMMENT_ID'}) }}" method="POST" class="profanity-check-form">
                        <div class="mb-3">
                            {{ contenu_field|raw }}
                            {{ form_rest|raw }}
                        </div>
                        <button type="submit" class="nk-btn nk-btn-rounded nk-btn-color-white">Update Comment</button>
                        <button type="button" class="nk-btn nk-btn-rounded nk-btn-color-dark cancel-update">Cancel</button>
                    </form>
                `;

                const finalFormHtml = updateFormHtml.replace('COMMENT_ID', commentId);

                $updateContainer.html(finalFormHtml).show();

                const $summernote = $updateContainer.find('.nk-summernote');
                $summernote.summernote({
                    height: 200,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['font', ['fontsize']],
                        ['para', ['ul', 'ol', 'paragraph']],
                        ['misc', ['codeview']]
                    ],
                    fontSizes: ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '28', '30', '36', '48', '64'],
                    placeholder: 'Update your comment here...'
                });

                $summernote.summernote('code', currentContent);
            });

            // Handle Cancel Update
            $(document).on('click', '.cancel-update', function() {
                $(this).closest('.update-form-container').hide();
            });

            // Handle Voting via AJAX
            $(document).on('click', '.vote-btn', function(e) {
                e.preventDefault();
                const $btn = $(this);
                const id = $btn.data('id');
                const type = $btn.data('type');
                const voteType = $btn.data('vote-type');
                const $voteSection = $btn.closest('.nk-forum-vote-section');
                const $voteCount = $voteSection.find('.vote-count');

                $.ajax({
                    url: '{{ path('ajax_vote_action') }}',
                    method: 'POST',
                    data: {
                        id: id,
                        type: type,
                        vote_type: voteType
                    },
                    success: function(response) {
                        if (response.success) {
                            $voteCount.text(response.votes);
                            $btn.addClass('voted');
                        } else {
                            Swal.fire({
                                title: 'Voting Error',
                                text: response.message,
                                icon: 'error',
                                background: '#1c2526',
                                color: '#d1d5db',
                                confirmButtonColor: '#ff6f61',
                                confirmButtonText: 'OK',
                                customClass: {
                                    popup: 'nk-gaming-swal',
                                    title: 'nk-gaming-swal-title',
                                    content: 'nk-gaming-swal-content'
                                }
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            title: 'Voting Error',
                            text: 'An error occurred while voting. Please try again.',
                            icon: 'error',
                            background: '#1c2526',
                            color: '#d1d5db',
                            confirmButtonColor: '#ff6f61',
                            confirmButtonText: 'OK',
                            customClass: {
                                popup: 'nk-gaming-swal',
                                title: 'nk-gaming-swal-title',
                                content: 'nk-gaming-swal-content'
                            }
                        });
                    }
                });
            });

            // Profanity Check Before Form Submission
            $(document).on('submit', '.profanity-check-form', function(e) {
                e.preventDefault(); // Prevent default submission
                const $form = $(this);
                const content = $form.find('.nk-summernote').summernote('code');

                // Disable the submit button to prevent multiple submissions
                const $submitButton = $form.find('button[type="submit"]');
                $submitButton.prop('disabled', true);

                $.ajax({
                    url: '{{ path('api_check_profanity') }}',
                    method: 'POST',
                    data: { content: content },
                    success: function(response) {
                        if (response.isProfane) {
                            const profanityList = response.details ? response.details.map(m => m['text']).join(', ') : '';
                            Swal.fire({
                                title: 'Inappropriate Content Detected',
                                html: 'Your comment contains inappropriate language. Please revise it.<br><strong>Detected:</strong> ' + (profanityList || 'N/A'),
                                icon: 'warning',
                                background: '#1c2526',
                                color: '#d1d5db',
                                confirmButtonColor: '#ff6f61',
                                confirmButtonText: 'Revise',
                                customClass: {
                                    popup: 'nk-gaming-swal',
                                    title: 'nk-gaming-swal-title',
                                    content: 'nk-gaming-swal-content'
                                }
                            }).then(() => {
                                $submitButton.prop('disabled', false); // Re-enable the button after closing
                            });
                        } else {
                            // Temporarily remove the event handler to avoid recursion
                            $form.off('submit');
                            // Submit the form natively
                            $form[0].submit();
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Profanity check failed:', status, error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Error checking profanity. Please try again.',
                            icon: 'error',
                            background: '#1c2526',
                            color: '#d1d5db',
                            confirmButtonColor: '#ff6f61',
                            confirmButtonText: 'OK',
                            customClass: {
                                popup: 'nk-gaming-swal',
                                title: 'nk-gaming-swal-title',
                                content: 'nk-gaming-swal-content'
                            }
                        }).then(() => {
                            $submitButton.prop('disabled', false); // Re-enable the button
                        });
                    }
                });
            });
        });
    </script>

    <style>
        /* Custom SweetAlert2 Gaming Theme */
        .nk-gaming-swal {
            border: 2px solid #0585e6;
            box-shadow: 0 0 20px rgba(5, 133, 230, 0.5);
            font-family: 'Montserrat', sans-serif;
        }
        .nk-gaming-swal-title {
            color: #fff;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        .nk-gaming-swal-content {
            color: #d1d5db;
        }
        .swal2-confirm {
            transition: transform 0.2s ease;
        }
        .swal2-confirm:hover {
            transform: scale(1.05);
        }
    </style>
{% endblock %}